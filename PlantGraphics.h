#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>
#using <System.Data.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace PlantCreator {
    ref class PlantGraphics;
}
namespace PlantCreator {
    namespace PlantGraphicsTableAdapters {
    ref class PlantGraphicsInformationTableAdapter;
    }
}
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace PlantCreator {
    using namespace System;
    ref class PlantGraphics;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"PlantGraphics"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class PlantGraphics : public ::System::Data::DataSet {
        public : ref class PlantGraphicsInformationDataTable;
        public : ref class PlantGraphicsInformationRow;
        public : ref class PlantGraphicsInformationRowChangeEvent;
        
        private: PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  tablePlantGraphicsInformation;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void PlantGraphicsInformationRowChangeEventHandler(::System::Object^  sender, PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PlantGraphics();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PlantGraphics(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  PlantGraphicsInformation {
            PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializePlantGraphicsInformation();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class PlantGraphicsInformationDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnPlantlsystemID;
            
            private: ::System::Data::DataColumn^  columnScienceNameID;
            
            private: ::System::Data::DataColumn^  columnStemLsystemString;
            
            private: ::System::Data::DataColumn^  columnPetioleLsystemString;
            
            private: ::System::Data::DataColumn^  columnLeafTypeNum;
            
            private: ::System::Data::DataColumn^  columnStemLengthNum;
            
            private: ::System::Data::DataColumn^  columnStemTopRadiusNum;
            
            private: ::System::Data::DataColumn^  columnStemBottomRadiusNum;
            
            private: ::System::Data::DataColumn^  columnPetioleLengthNum;
            
            private: ::System::Data::DataColumn^  columnPetioleTopRadiusNum;
            
            private: ::System::Data::DataColumn^  columnPetioleBottomRadius;
            
            private: ::System::Data::DataColumn^  columnVeinLengthNum;
            
            private: ::System::Data::DataColumn^  columnVeinTopRadiusNum;
            
            private: ::System::Data::DataColumn^  columnVeinBottomRadiusNum;
            
            private: ::System::Data::DataColumn^  columnVeinLsystemString;
            
            private: ::System::Data::DataColumn^  columnxRotate;
            
            private: ::System::Data::DataColumn^  columnyRotate;
            
            private: ::System::Data::DataColumn^  columnzRotate;
            
            private: ::System::Data::DataColumn^  columnNitrogen;
            
            private: ::System::Data::DataColumn^  columnHydrogen;
            
            private: ::System::Data::DataColumn^  columnPotassium;
            
            private: ::System::Data::DataColumn^  columnPhosphorous;
            
            private: ::System::Data::DataColumn^  columnCalcium;
            
            private: ::System::Data::DataColumn^  columnMagnesium;
            
            private: ::System::Data::DataColumn^  columnSulphur;
            
            private: ::System::Data::DataColumn^  columnChlorine;
            
            private: ::System::Data::DataColumn^  columnBoron;
            
            private: ::System::Data::DataColumn^  columnIron;
            
            private: ::System::Data::DataColumn^  columnManganese;
            
            private: ::System::Data::DataColumn^  columnZinc;
            
            private: ::System::Data::DataColumn^  columnCopper;
            
            private: ::System::Data::DataColumn^  columnSodium;
            
            private: ::System::Data::DataColumn^  columnMolybdenum;
            
            private: ::System::Data::DataColumn^  columnDivision;
            
            private: ::System::Data::DataColumn^  columnsubDivision;
            
            private: ::System::Data::DataColumn^  columnClass;
            
            private: ::System::Data::DataColumn^  columnsubClass;
            
            private: ::System::Data::DataColumn^  columnOrder;
            
            private: ::System::Data::DataColumn^  columnsubOrder;
            
            private: ::System::Data::DataColumn^  columnFamily;
            
            private: ::System::Data::DataColumn^  columnsubFamily;
            
            private: ::System::Data::DataColumn^  columnGenus;
            
            private: ::System::Data::DataColumn^  columnsubGenus;
            
            private: ::System::Data::DataColumn^  columnSpecies;
            
            private: ::System::Data::DataColumn^  columnsubSpecies;
            
            private: ::System::Data::DataColumn^  columnleafLength;
            
            private: ::System::Data::DataColumn^  columnleafRadius;
            
            private: ::System::Data::DataColumn^  columnfruitType;
            
            private: ::System::Data::DataColumn^  columnflowerType;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEventHandler^  PlantGraphicsInformationRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEventHandler^  PlantGraphicsInformationRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEventHandler^  PlantGraphicsInformationRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEventHandler^  PlantGraphicsInformationRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantGraphicsInformationDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantGraphicsInformationDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantGraphicsInformationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PlantlsystemIDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ScienceNameIDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  StemLsystemStringColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PetioleLsystemStringColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  LeafTypeNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  StemLengthNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  StemTopRadiusNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  StemBottomRadiusNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PetioleLengthNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PetioleTopRadiusNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PetioleBottomRadiusColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  VeinLengthNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  VeinTopRadiusNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  VeinBottomRadiusNumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  VeinLsystemStringColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  xRotateColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  yRotateColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  zRotateColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  NitrogenColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  HydrogenColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PotassiumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  PhosphorousColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CalciumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MagnesiumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  SulphurColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ChlorineColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  BoronColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  IronColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ManganeseColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ZincColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  CopperColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  SodiumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  MolybdenumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  DivisionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  subDivisionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  ClassColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  subClassColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  OrderColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  subOrderColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  FamilyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  subFamilyColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  GenusColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  subGenusColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  SpeciesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  subSpeciesColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  leafLengthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  leafRadiusColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  fruitTypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  flowerTypeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  default [::System::Int32 ] {
                PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddPlantGraphicsInformationRow(PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  AddPlantGraphicsInformationRow(
                        System::String^  ScienceNameID, 
                        System::String^  StemLsystemString, 
                        System::String^  PetioleLsystemString, 
                        System::Double LeafTypeNum, 
                        System::Double StemLengthNum, 
                        System::Double StemTopRadiusNum, 
                        System::Double StemBottomRadiusNum, 
                        System::Double PetioleLengthNum, 
                        System::Double PetioleTopRadiusNum, 
                        System::Double PetioleBottomRadius, 
                        System::Double VeinLengthNum, 
                        System::Double VeinTopRadiusNum, 
                        System::Double VeinBottomRadiusNum, 
                        System::String^  VeinLsystemString, 
                        System::Double xRotate, 
                        System::Double yRotate, 
                        System::Double zRotate, 
                        System::Double Nitrogen, 
                        System::Double Hydrogen, 
                        System::Double Potassium, 
                        System::Double Phosphorous, 
                        System::Double Calcium, 
                        System::Double Magnesium, 
                        System::Double Sulphur, 
                        System::Double Chlorine, 
                        System::Double Boron, 
                        System::Double Iron, 
                        System::Double Manganese, 
                        System::Double Zinc, 
                        System::Double Copper, 
                        System::Double Sodium, 
                        System::Double Molybdenum, 
                        System::String^  Division, 
                        System::String^  subDivision, 
                        System::String^  Class, 
                        System::String^  subClass, 
                        System::String^  Order, 
                        System::String^  subOrder, 
                        System::String^  Family, 
                        System::String^  subFamily, 
                        System::String^  Genus, 
                        System::String^  subGenus, 
                        System::String^  Species, 
                        System::String^  subSpecies, 
                        System::Double leafLength, 
                        System::Double leafRadius, 
                        System::Int32 fruitType, 
                        System::Int32 flowerType);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  FindByPlantlsystemID(System::Int32 PlantlsystemID);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  NewPlantGraphicsInformationRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovePlantGraphicsInformationRow(PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class PlantGraphicsInformationRow : public ::System::Data::DataRow {
            
            private: PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  tablePlantGraphicsInformation;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantGraphicsInformationRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 PlantlsystemID {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  ScienceNameID {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  StemLsystemString {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  PetioleLsystemString {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double LeafTypeNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double StemLengthNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double StemTopRadiusNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double StemBottomRadiusNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double PetioleLengthNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double PetioleTopRadiusNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double PetioleBottomRadius {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double VeinLengthNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double VeinTopRadiusNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double VeinBottomRadiusNum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  VeinLsystemString {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double xRotate {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double yRotate {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double zRotate {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Nitrogen {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Hydrogen {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Potassium {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Phosphorous {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Calcium {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Magnesium {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Sulphur {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Chlorine {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Boron {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Iron {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Manganese {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Zinc {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Copper {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Sodium {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double Molybdenum {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Division {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  subDivision {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Class {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  subClass {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Order {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  subOrder {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Family {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  subFamily {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Genus {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  subGenus {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  Species {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  subSpecies {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double leafLength {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Double leafRadius {
                System::Double get();
                System::Void set(System::Double value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 fruitType {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 flowerType {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsScienceNameIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetScienceNameIDNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsStemLsystemStringNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetStemLsystemStringNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsPetioleLsystemStringNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetPetioleLsystemStringNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsLeafTypeNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetLeafTypeNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsStemLengthNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetStemLengthNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsStemTopRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetStemTopRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsStemBottomRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetStemBottomRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsPetioleLengthNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetPetioleLengthNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsPetioleTopRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetPetioleTopRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsPetioleBottomRadiusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetPetioleBottomRadiusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsVeinLengthNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetVeinLengthNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsVeinTopRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetVeinTopRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsVeinBottomRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetVeinBottomRadiusNumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsVeinLsystemStringNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetVeinLsystemStringNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsxRotateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetxRotateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsyRotateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetyRotateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IszRotateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetzRotateNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsNitrogenNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetNitrogenNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsHydrogenNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetHydrogenNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsPotassiumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetPotassiumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsPhosphorousNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetPhosphorousNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCalciumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCalciumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMagnesiumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMagnesiumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsSulphurNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetSulphurNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsChlorineNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetChlorineNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsBoronNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetBoronNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsIronNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetIronNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsManganeseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetManganeseNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsZincNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetZincNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsCopperNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetCopperNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsSodiumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetSodiumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsMolybdenumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetMolybdenumNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsDivisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetDivisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssubDivisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsubDivisionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsClassNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetClassNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssubClassNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsubClassNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsOrderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetOrderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssubOrderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsubOrderNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsFamilyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetFamilyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssubFamilyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsubFamilyNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsGenusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetGenusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssubGenusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsubGenusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsSpeciesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetSpeciesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IssubSpeciesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetsubSpeciesNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsleafLengthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetleafLengthNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsleafRadiusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetleafRadiusNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsfruitTypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetfruitTypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean IsflowerTypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void SetflowerTypeNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class PlantGraphicsInformationRowChangeEvent : public ::System::EventArgs {
            
            private: PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            PlantGraphicsInformationRowChangeEvent(PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  Row {
                PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace PlantCreator {
    
    
    inline PlantGraphics::PlantGraphics() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &PlantCreator::PlantGraphics::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline PlantGraphics::PlantGraphics(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &PlantCreator::PlantGraphics::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"PlantGraphicsInformation"] != nullptr) {
                __super::Tables->Add((gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable(ds->Tables[L"PlantGraphicsInformation"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &PlantCreator::PlantGraphics::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  PlantGraphics::PlantGraphicsInformation::get() {
        return this->tablePlantGraphicsInformation;
    }
    
    inline ::System::Data::SchemaSerializationMode PlantGraphics::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void PlantGraphics::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  PlantGraphics::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  PlantGraphics::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void PlantGraphics::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  PlantGraphics::Clone() {
        PlantCreator::PlantGraphics^  cln = (cli::safe_cast<PlantCreator::PlantGraphics^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean PlantGraphics::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean PlantGraphics::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void PlantGraphics::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"PlantGraphicsInformation"] != nullptr) {
                __super::Tables->Add((gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable(ds->Tables[L"PlantGraphicsInformation"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  PlantGraphics::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void PlantGraphics::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void PlantGraphics::InitVars(::System::Boolean initTable) {
        this->tablePlantGraphicsInformation = (cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  >(__super::Tables[L"PlantGraphicsInformation"]));
        if (initTable == true) {
            if (this->tablePlantGraphicsInformation != nullptr) {
                this->tablePlantGraphicsInformation->InitVars();
            }
        }
    }
    
    inline ::System::Void PlantGraphics::InitClass() {
        this->DataSetName = L"PlantGraphics";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/PlantGraphics.xsd";
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablePlantGraphicsInformation = (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable());
        __super::Tables->Add(this->tablePlantGraphicsInformation);
    }
    
    inline ::System::Boolean PlantGraphics::ShouldSerializePlantGraphicsInformation() {
        return false;
    }
    
    inline ::System::Void PlantGraphics::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  PlantGraphics::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        PlantCreator::PlantGraphics^  ds = (gcnew PlantCreator::PlantGraphics());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline PlantGraphics::PlantGraphicsInformationDataTable::PlantGraphicsInformationDataTable() {
        this->TableName = L"PlantGraphicsInformation";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline PlantGraphics::PlantGraphicsInformationDataTable::PlantGraphicsInformationDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline PlantGraphics::PlantGraphicsInformationDataTable::PlantGraphicsInformationDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::PlantlsystemIDColumn::get() {
        return this->columnPlantlsystemID;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::ScienceNameIDColumn::get() {
        return this->columnScienceNameID;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::StemLsystemStringColumn::get() {
        return this->columnStemLsystemString;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::PetioleLsystemStringColumn::get() {
        return this->columnPetioleLsystemString;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::LeafTypeNumColumn::get() {
        return this->columnLeafTypeNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::StemLengthNumColumn::get() {
        return this->columnStemLengthNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::StemTopRadiusNumColumn::get() {
        return this->columnStemTopRadiusNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::StemBottomRadiusNumColumn::get() {
        return this->columnStemBottomRadiusNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::PetioleLengthNumColumn::get() {
        return this->columnPetioleLengthNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::PetioleTopRadiusNumColumn::get() {
        return this->columnPetioleTopRadiusNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::PetioleBottomRadiusColumn::get() {
        return this->columnPetioleBottomRadius;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::VeinLengthNumColumn::get() {
        return this->columnVeinLengthNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::VeinTopRadiusNumColumn::get() {
        return this->columnVeinTopRadiusNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::VeinBottomRadiusNumColumn::get() {
        return this->columnVeinBottomRadiusNum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::VeinLsystemStringColumn::get() {
        return this->columnVeinLsystemString;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::xRotateColumn::get() {
        return this->columnxRotate;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::yRotateColumn::get() {
        return this->columnyRotate;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::zRotateColumn::get() {
        return this->columnzRotate;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::NitrogenColumn::get() {
        return this->columnNitrogen;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::HydrogenColumn::get() {
        return this->columnHydrogen;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::PotassiumColumn::get() {
        return this->columnPotassium;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::PhosphorousColumn::get() {
        return this->columnPhosphorous;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::CalciumColumn::get() {
        return this->columnCalcium;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::MagnesiumColumn::get() {
        return this->columnMagnesium;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::SulphurColumn::get() {
        return this->columnSulphur;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::ChlorineColumn::get() {
        return this->columnChlorine;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::BoronColumn::get() {
        return this->columnBoron;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::IronColumn::get() {
        return this->columnIron;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::ManganeseColumn::get() {
        return this->columnManganese;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::ZincColumn::get() {
        return this->columnZinc;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::CopperColumn::get() {
        return this->columnCopper;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::SodiumColumn::get() {
        return this->columnSodium;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::MolybdenumColumn::get() {
        return this->columnMolybdenum;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::DivisionColumn::get() {
        return this->columnDivision;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::subDivisionColumn::get() {
        return this->columnsubDivision;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::ClassColumn::get() {
        return this->columnClass;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::subClassColumn::get() {
        return this->columnsubClass;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::OrderColumn::get() {
        return this->columnOrder;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::subOrderColumn::get() {
        return this->columnsubOrder;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::FamilyColumn::get() {
        return this->columnFamily;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::subFamilyColumn::get() {
        return this->columnsubFamily;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::GenusColumn::get() {
        return this->columnGenus;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::subGenusColumn::get() {
        return this->columnsubGenus;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::SpeciesColumn::get() {
        return this->columnSpecies;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::subSpeciesColumn::get() {
        return this->columnsubSpecies;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::leafLengthColumn::get() {
        return this->columnleafLength;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::leafRadiusColumn::get() {
        return this->columnleafRadius;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::fruitTypeColumn::get() {
        return this->columnfruitType;
    }
    
    inline ::System::Data::DataColumn^  PlantGraphics::PlantGraphicsInformationDataTable::flowerTypeColumn::get() {
        return this->columnflowerType;
    }
    
    inline ::System::Int32 PlantGraphics::PlantGraphicsInformationDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  PlantGraphics::PlantGraphicsInformationDataTable::default::get(
                ::System::Int32 index) {
        return (cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::AddPlantGraphicsInformationRow(PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  row) {
        this->Rows->Add(row);
    }
    
    inline PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  PlantGraphics::PlantGraphicsInformationDataTable::AddPlantGraphicsInformationRow(
                System::String^  ScienceNameID, 
                System::String^  StemLsystemString, 
                System::String^  PetioleLsystemString, 
                System::Double LeafTypeNum, 
                System::Double StemLengthNum, 
                System::Double StemTopRadiusNum, 
                System::Double StemBottomRadiusNum, 
                System::Double PetioleLengthNum, 
                System::Double PetioleTopRadiusNum, 
                System::Double PetioleBottomRadius, 
                System::Double VeinLengthNum, 
                System::Double VeinTopRadiusNum, 
                System::Double VeinBottomRadiusNum, 
                System::String^  VeinLsystemString, 
                System::Double xRotate, 
                System::Double yRotate, 
                System::Double zRotate, 
                System::Double Nitrogen, 
                System::Double Hydrogen, 
                System::Double Potassium, 
                System::Double Phosphorous, 
                System::Double Calcium, 
                System::Double Magnesium, 
                System::Double Sulphur, 
                System::Double Chlorine, 
                System::Double Boron, 
                System::Double Iron, 
                System::Double Manganese, 
                System::Double Zinc, 
                System::Double Copper, 
                System::Double Sodium, 
                System::Double Molybdenum, 
                System::String^  Division, 
                System::String^  subDivision, 
                System::String^  Class, 
                System::String^  subClass, 
                System::String^  Order, 
                System::String^  subOrder, 
                System::String^  Family, 
                System::String^  subFamily, 
                System::String^  Genus, 
                System::String^  subGenus, 
                System::String^  Species, 
                System::String^  subSpecies, 
                System::Double leafLength, 
                System::Double leafRadius, 
                System::Int32 fruitType, 
                System::Int32 flowerType) {
        PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  rowPlantGraphicsInformationRow = (cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(49) {nullptr, ScienceNameID, 
            StemLsystemString, PetioleLsystemString, LeafTypeNum, StemLengthNum, StemTopRadiusNum, StemBottomRadiusNum, PetioleLengthNum, 
            PetioleTopRadiusNum, PetioleBottomRadius, VeinLengthNum, VeinTopRadiusNum, VeinBottomRadiusNum, VeinLsystemString, xRotate, 
            yRotate, zRotate, Nitrogen, Hydrogen, Potassium, Phosphorous, Calcium, Magnesium, Sulphur, Chlorine, Boron, Iron, Manganese, 
            Zinc, Copper, Sodium, Molybdenum, Division, subDivision, Class, subClass, Order, subOrder, Family, subFamily, Genus, subGenus, 
            Species, subSpecies, leafLength, leafRadius, fruitType, flowerType};
        rowPlantGraphicsInformationRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowPlantGraphicsInformationRow);
        return rowPlantGraphicsInformationRow;
    }
    
    inline PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  PlantGraphics::PlantGraphicsInformationDataTable::FindByPlantlsystemID(
                System::Int32 PlantlsystemID) {
        return (cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(this->Rows->Find(gcnew cli::array< System::Object^  >(1) {PlantlsystemID})));
    }
    
    inline ::System::Collections::IEnumerator^  PlantGraphics::PlantGraphicsInformationDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  PlantGraphics::PlantGraphicsInformationDataTable::Clone() {
        PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  cln = (cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  PlantGraphics::PlantGraphicsInformationDataTable::CreateInstance() {
        return (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable());
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::InitVars() {
        this->columnPlantlsystemID = __super::Columns[L"PlantlsystemID"];
        this->columnScienceNameID = __super::Columns[L"ScienceNameID"];
        this->columnStemLsystemString = __super::Columns[L"StemLsystemString"];
        this->columnPetioleLsystemString = __super::Columns[L"PetioleLsystemString"];
        this->columnLeafTypeNum = __super::Columns[L"LeafTypeNum"];
        this->columnStemLengthNum = __super::Columns[L"StemLengthNum"];
        this->columnStemTopRadiusNum = __super::Columns[L"StemTopRadiusNum"];
        this->columnStemBottomRadiusNum = __super::Columns[L"StemBottomRadiusNum"];
        this->columnPetioleLengthNum = __super::Columns[L"PetioleLengthNum"];
        this->columnPetioleTopRadiusNum = __super::Columns[L"PetioleTopRadiusNum"];
        this->columnPetioleBottomRadius = __super::Columns[L"PetioleBottomRadius"];
        this->columnVeinLengthNum = __super::Columns[L"VeinLengthNum"];
        this->columnVeinTopRadiusNum = __super::Columns[L"VeinTopRadiusNum"];
        this->columnVeinBottomRadiusNum = __super::Columns[L"VeinBottomRadiusNum"];
        this->columnVeinLsystemString = __super::Columns[L"VeinLsystemString"];
        this->columnxRotate = __super::Columns[L"xRotate"];
        this->columnyRotate = __super::Columns[L"yRotate"];
        this->columnzRotate = __super::Columns[L"zRotate"];
        this->columnNitrogen = __super::Columns[L"Nitrogen"];
        this->columnHydrogen = __super::Columns[L"Hydrogen"];
        this->columnPotassium = __super::Columns[L"Potassium"];
        this->columnPhosphorous = __super::Columns[L"Phosphorous"];
        this->columnCalcium = __super::Columns[L"Calcium"];
        this->columnMagnesium = __super::Columns[L"Magnesium"];
        this->columnSulphur = __super::Columns[L"Sulphur"];
        this->columnChlorine = __super::Columns[L"Chlorine"];
        this->columnBoron = __super::Columns[L"Boron"];
        this->columnIron = __super::Columns[L"Iron"];
        this->columnManganese = __super::Columns[L"Manganese"];
        this->columnZinc = __super::Columns[L"Zinc"];
        this->columnCopper = __super::Columns[L"Copper"];
        this->columnSodium = __super::Columns[L"Sodium"];
        this->columnMolybdenum = __super::Columns[L"Molybdenum"];
        this->columnDivision = __super::Columns[L"Division"];
        this->columnsubDivision = __super::Columns[L"subDivision"];
        this->columnClass = __super::Columns[L"Class"];
        this->columnsubClass = __super::Columns[L"subClass"];
        this->columnOrder = __super::Columns[L"Order"];
        this->columnsubOrder = __super::Columns[L"subOrder"];
        this->columnFamily = __super::Columns[L"Family"];
        this->columnsubFamily = __super::Columns[L"subFamily"];
        this->columnGenus = __super::Columns[L"Genus"];
        this->columnsubGenus = __super::Columns[L"subGenus"];
        this->columnSpecies = __super::Columns[L"Species"];
        this->columnsubSpecies = __super::Columns[L"subSpecies"];
        this->columnleafLength = __super::Columns[L"leafLength"];
        this->columnleafRadius = __super::Columns[L"leafRadius"];
        this->columnfruitType = __super::Columns[L"fruitType"];
        this->columnflowerType = __super::Columns[L"flowerType"];
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::InitClass() {
        this->columnPlantlsystemID = (gcnew ::System::Data::DataColumn(L"PlantlsystemID", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPlantlsystemID);
        this->columnScienceNameID = (gcnew ::System::Data::DataColumn(L"ScienceNameID", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnScienceNameID);
        this->columnStemLsystemString = (gcnew ::System::Data::DataColumn(L"StemLsystemString", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnStemLsystemString);
        this->columnPetioleLsystemString = (gcnew ::System::Data::DataColumn(L"PetioleLsystemString", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPetioleLsystemString);
        this->columnLeafTypeNum = (gcnew ::System::Data::DataColumn(L"LeafTypeNum", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnLeafTypeNum);
        this->columnStemLengthNum = (gcnew ::System::Data::DataColumn(L"StemLengthNum", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnStemLengthNum);
        this->columnStemTopRadiusNum = (gcnew ::System::Data::DataColumn(L"StemTopRadiusNum", ::System::Double::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnStemTopRadiusNum);
        this->columnStemBottomRadiusNum = (gcnew ::System::Data::DataColumn(L"StemBottomRadiusNum", ::System::Double::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnStemBottomRadiusNum);
        this->columnPetioleLengthNum = (gcnew ::System::Data::DataColumn(L"PetioleLengthNum", ::System::Double::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPetioleLengthNum);
        this->columnPetioleTopRadiusNum = (gcnew ::System::Data::DataColumn(L"PetioleTopRadiusNum", ::System::Double::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPetioleTopRadiusNum);
        this->columnPetioleBottomRadius = (gcnew ::System::Data::DataColumn(L"PetioleBottomRadius", ::System::Double::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPetioleBottomRadius);
        this->columnVeinLengthNum = (gcnew ::System::Data::DataColumn(L"VeinLengthNum", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVeinLengthNum);
        this->columnVeinTopRadiusNum = (gcnew ::System::Data::DataColumn(L"VeinTopRadiusNum", ::System::Double::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVeinTopRadiusNum);
        this->columnVeinBottomRadiusNum = (gcnew ::System::Data::DataColumn(L"VeinBottomRadiusNum", ::System::Double::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVeinBottomRadiusNum);
        this->columnVeinLsystemString = (gcnew ::System::Data::DataColumn(L"VeinLsystemString", ::System::String::typeid, nullptr, 
            ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnVeinLsystemString);
        this->columnxRotate = (gcnew ::System::Data::DataColumn(L"xRotate", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnxRotate);
        this->columnyRotate = (gcnew ::System::Data::DataColumn(L"yRotate", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnyRotate);
        this->columnzRotate = (gcnew ::System::Data::DataColumn(L"zRotate", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnzRotate);
        this->columnNitrogen = (gcnew ::System::Data::DataColumn(L"Nitrogen", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnNitrogen);
        this->columnHydrogen = (gcnew ::System::Data::DataColumn(L"Hydrogen", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnHydrogen);
        this->columnPotassium = (gcnew ::System::Data::DataColumn(L"Potassium", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPotassium);
        this->columnPhosphorous = (gcnew ::System::Data::DataColumn(L"Phosphorous", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnPhosphorous);
        this->columnCalcium = (gcnew ::System::Data::DataColumn(L"Calcium", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCalcium);
        this->columnMagnesium = (gcnew ::System::Data::DataColumn(L"Magnesium", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMagnesium);
        this->columnSulphur = (gcnew ::System::Data::DataColumn(L"Sulphur", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSulphur);
        this->columnChlorine = (gcnew ::System::Data::DataColumn(L"Chlorine", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnChlorine);
        this->columnBoron = (gcnew ::System::Data::DataColumn(L"Boron", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnBoron);
        this->columnIron = (gcnew ::System::Data::DataColumn(L"Iron", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnIron);
        this->columnManganese = (gcnew ::System::Data::DataColumn(L"Manganese", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnManganese);
        this->columnZinc = (gcnew ::System::Data::DataColumn(L"Zinc", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnZinc);
        this->columnCopper = (gcnew ::System::Data::DataColumn(L"Copper", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnCopper);
        this->columnSodium = (gcnew ::System::Data::DataColumn(L"Sodium", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSodium);
        this->columnMolybdenum = (gcnew ::System::Data::DataColumn(L"Molybdenum", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnMolybdenum);
        this->columnDivision = (gcnew ::System::Data::DataColumn(L"Division", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnDivision);
        this->columnsubDivision = (gcnew ::System::Data::DataColumn(L"subDivision", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnsubDivision);
        this->columnClass = (gcnew ::System::Data::DataColumn(L"Class", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnClass);
        this->columnsubClass = (gcnew ::System::Data::DataColumn(L"subClass", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnsubClass);
        this->columnOrder = (gcnew ::System::Data::DataColumn(L"Order", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnOrder);
        this->columnsubOrder = (gcnew ::System::Data::DataColumn(L"subOrder", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnsubOrder);
        this->columnFamily = (gcnew ::System::Data::DataColumn(L"Family", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnFamily);
        this->columnsubFamily = (gcnew ::System::Data::DataColumn(L"subFamily", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnsubFamily);
        this->columnGenus = (gcnew ::System::Data::DataColumn(L"Genus", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnGenus);
        this->columnsubGenus = (gcnew ::System::Data::DataColumn(L"subGenus", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnsubGenus);
        this->columnSpecies = (gcnew ::System::Data::DataColumn(L"Species", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnSpecies);
        this->columnsubSpecies = (gcnew ::System::Data::DataColumn(L"subSpecies", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnsubSpecies);
        this->columnleafLength = (gcnew ::System::Data::DataColumn(L"leafLength", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnleafLength);
        this->columnleafRadius = (gcnew ::System::Data::DataColumn(L"leafRadius", ::System::Double::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnleafRadius);
        this->columnfruitType = (gcnew ::System::Data::DataColumn(L"fruitType", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnfruitType);
        this->columnflowerType = (gcnew ::System::Data::DataColumn(L"flowerType", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnflowerType);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnPlantlsystemID}, 
                true)));
        this->columnPlantlsystemID->AutoIncrement = true;
        this->columnPlantlsystemID->AutoIncrementSeed = -1;
        this->columnPlantlsystemID->AutoIncrementStep = -1;
        this->columnPlantlsystemID->AllowDBNull = false;
        this->columnPlantlsystemID->Unique = true;
        this->columnScienceNameID->MaxLength = 255;
        this->columnStemLsystemString->MaxLength = 255;
        this->columnPetioleLsystemString->MaxLength = 255;
        this->columnVeinLsystemString->MaxLength = 255;
        this->columnDivision->MaxLength = 255;
        this->columnsubDivision->MaxLength = 255;
        this->columnClass->MaxLength = 255;
        this->columnsubClass->MaxLength = 255;
        this->columnOrder->MaxLength = 255;
        this->columnsubOrder->MaxLength = 255;
        this->columnFamily->MaxLength = 255;
        this->columnsubFamily->MaxLength = 255;
        this->columnGenus->MaxLength = 255;
        this->columnsubGenus->MaxLength = 255;
        this->columnSpecies->MaxLength = 255;
        this->columnsubSpecies->MaxLength = 255;
    }
    
    inline PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  PlantGraphics::PlantGraphicsInformationDataTable::NewPlantGraphicsInformationRow() {
        return (cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  PlantGraphics::PlantGraphicsInformationDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationRow(builder));
    }
    
    inline ::System::Type^  PlantGraphics::PlantGraphicsInformationDataTable::GetRowType() {
        return PlantCreator::PlantGraphics::PlantGraphicsInformationRow::typeid;
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->PlantGraphicsInformationRowChanged(this, (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEvent((cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->PlantGraphicsInformationRowChanging(this, (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEvent((cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->PlantGraphicsInformationRowDeleted(this, (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEvent((cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->PlantGraphicsInformationRowDeleting(this, (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationRowChangeEvent((cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationDataTable::RemovePlantGraphicsInformationRow(PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  PlantGraphics::PlantGraphicsInformationDataTable::GetTypedTableSchema(
                ::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        PlantCreator::PlantGraphics^  ds = (gcnew PlantCreator::PlantGraphics());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"PlantGraphicsInformationDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline PlantGraphics::PlantGraphicsInformationRow::PlantGraphicsInformationRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablePlantGraphicsInformation = (cli::safe_cast<PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  >(this->Table));
    }
    
    inline System::Int32 PlantGraphics::PlantGraphicsInformationRow::PlantlsystemID::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablePlantGraphicsInformation->PlantlsystemIDColumn]));
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::PlantlsystemID::set(System::Int32 value) {
        this[this->tablePlantGraphicsInformation->PlantlsystemIDColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::ScienceNameID::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->ScienceNameIDColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'ScienceNameID\' in table \'PlantGraphicsInformation\' is DBNul" 
L"l.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::ScienceNameID::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->ScienceNameIDColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::StemLsystemString::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->StemLsystemStringColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'StemLsystemString\' in table \'PlantGraphicsInformation\' is D" 
L"BNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::StemLsystemString::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->StemLsystemStringColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::PetioleLsystemString::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->PetioleLsystemStringColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PetioleLsystemString\' in table \'PlantGraphicsInformation\' i" 
L"s DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::PetioleLsystemString::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->PetioleLsystemStringColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::LeafTypeNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->LeafTypeNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'LeafTypeNum\' in table \'PlantGraphicsInformation\' is DBNull." 
L"", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::LeafTypeNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->LeafTypeNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::StemLengthNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->StemLengthNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'StemLengthNum\' in table \'PlantGraphicsInformation\' is DBNul" 
L"l.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::StemLengthNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->StemLengthNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::StemTopRadiusNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->StemTopRadiusNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'StemTopRadiusNum\' in table \'PlantGraphicsInformation\' is DB" 
L"Null.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::StemTopRadiusNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->StemTopRadiusNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::StemBottomRadiusNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->StemBottomRadiusNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'StemBottomRadiusNum\' in table \'PlantGraphicsInformation\' is" 
L" DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::StemBottomRadiusNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->StemBottomRadiusNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::PetioleLengthNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->PetioleLengthNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PetioleLengthNum\' in table \'PlantGraphicsInformation\' is DB" 
L"Null.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::PetioleLengthNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->PetioleLengthNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::PetioleTopRadiusNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->PetioleTopRadiusNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PetioleTopRadiusNum\' in table \'PlantGraphicsInformation\' is" 
L" DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::PetioleTopRadiusNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->PetioleTopRadiusNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::PetioleBottomRadius::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->PetioleBottomRadiusColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'PetioleBottomRadius\' in table \'PlantGraphicsInformation\' is" 
L" DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::PetioleBottomRadius::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->PetioleBottomRadiusColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::VeinLengthNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->VeinLengthNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VeinLengthNum\' in table \'PlantGraphicsInformation\' is DBNul" 
L"l.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::VeinLengthNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->VeinLengthNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::VeinTopRadiusNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->VeinTopRadiusNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VeinTopRadiusNum\' in table \'PlantGraphicsInformation\' is DB" 
L"Null.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::VeinTopRadiusNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->VeinTopRadiusNumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::VeinBottomRadiusNum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->VeinBottomRadiusNumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VeinBottomRadiusNum\' in table \'PlantGraphicsInformation\' is" 
L" DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::VeinBottomRadiusNum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->VeinBottomRadiusNumColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::VeinLsystemString::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->VeinLsystemStringColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'VeinLsystemString\' in table \'PlantGraphicsInformation\' is D" 
L"BNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::VeinLsystemString::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->VeinLsystemStringColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::xRotate::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->xRotateColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'xRotate\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::xRotate::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->xRotateColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::yRotate::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->yRotateColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'yRotate\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::yRotate::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->yRotateColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::zRotate::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->zRotateColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'zRotate\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::zRotate::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->zRotateColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Nitrogen::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->NitrogenColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Nitrogen\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Nitrogen::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->NitrogenColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Hydrogen::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->HydrogenColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Hydrogen\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Hydrogen::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->HydrogenColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Potassium::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->PotassiumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Potassium\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Potassium::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->PotassiumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Phosphorous::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->PhosphorousColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Phosphorous\' in table \'PlantGraphicsInformation\' is DBNull." 
L"", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Phosphorous::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->PhosphorousColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Calcium::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->CalciumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Calcium\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Calcium::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->CalciumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Magnesium::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->MagnesiumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Magnesium\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Magnesium::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->MagnesiumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Sulphur::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->SulphurColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Sulphur\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Sulphur::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->SulphurColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Chlorine::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->ChlorineColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Chlorine\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Chlorine::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->ChlorineColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Boron::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->BoronColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Boron\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Boron::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->BoronColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Iron::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->IronColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Iron\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Iron::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->IronColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Manganese::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->ManganeseColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Manganese\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Manganese::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->ManganeseColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Zinc::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->ZincColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Zinc\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Zinc::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->ZincColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Copper::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->CopperColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Copper\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Copper::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->CopperColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Sodium::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->SodiumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Sodium\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Sodium::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->SodiumColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::Molybdenum::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->MolybdenumColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Molybdenum\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Molybdenum::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->MolybdenumColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::Division::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->DivisionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Division\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Division::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->DivisionColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::subDivision::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->subDivisionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subDivision\' in table \'PlantGraphicsInformation\' is DBNull." 
L"", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::subDivision::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->subDivisionColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::Class::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->ClassColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Class\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Class::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->ClassColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::subClass::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->subClassColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subClass\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::subClass::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->subClassColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::Order::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->OrderColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Order\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Order::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->OrderColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::subOrder::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->subOrderColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subOrder\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::subOrder::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->subOrderColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::Family::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->FamilyColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Family\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Family::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->FamilyColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::subFamily::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->subFamilyColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subFamily\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::subFamily::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->subFamilyColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::Genus::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->GenusColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Genus\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Genus::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->GenusColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::subGenus::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->subGenusColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subGenus\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::subGenus::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->subGenusColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::Species::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->SpeciesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'Species\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::Species::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->SpeciesColumn] = value;
    }
    
    inline System::String^  PlantGraphics::PlantGraphicsInformationRow::subSpecies::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablePlantGraphicsInformation->subSpeciesColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'subSpecies\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::subSpecies::set(System::String^  value) {
        this[this->tablePlantGraphicsInformation->subSpeciesColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::leafLength::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->leafLengthColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'leafLength\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::leafLength::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->leafLengthColumn] = value;
    }
    
    inline System::Double PlantGraphics::PlantGraphicsInformationRow::leafRadius::get() {
        try {
            return (cli::safe_cast<::System::Double >(this[this->tablePlantGraphicsInformation->leafRadiusColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'leafRadius\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::leafRadius::set(System::Double value) {
        this[this->tablePlantGraphicsInformation->leafRadiusColumn] = value;
    }
    
    inline System::Int32 PlantGraphics::PlantGraphicsInformationRow::fruitType::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablePlantGraphicsInformation->fruitTypeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'fruitType\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::fruitType::set(System::Int32 value) {
        this[this->tablePlantGraphicsInformation->fruitTypeColumn] = value;
    }
    
    inline System::Int32 PlantGraphics::PlantGraphicsInformationRow::flowerType::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablePlantGraphicsInformation->flowerTypeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'flowerType\' in table \'PlantGraphicsInformation\' is DBNull.", 
                e));
        }
    }
    inline System::Void PlantGraphics::PlantGraphicsInformationRow::flowerType::set(System::Int32 value) {
        this[this->tablePlantGraphicsInformation->flowerTypeColumn] = value;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsScienceNameIDNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->ScienceNameIDColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetScienceNameIDNull() {
        this[this->tablePlantGraphicsInformation->ScienceNameIDColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsStemLsystemStringNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->StemLsystemStringColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetStemLsystemStringNull() {
        this[this->tablePlantGraphicsInformation->StemLsystemStringColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsPetioleLsystemStringNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->PetioleLsystemStringColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetPetioleLsystemStringNull() {
        this[this->tablePlantGraphicsInformation->PetioleLsystemStringColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsLeafTypeNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->LeafTypeNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetLeafTypeNumNull() {
        this[this->tablePlantGraphicsInformation->LeafTypeNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsStemLengthNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->StemLengthNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetStemLengthNumNull() {
        this[this->tablePlantGraphicsInformation->StemLengthNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsStemTopRadiusNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->StemTopRadiusNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetStemTopRadiusNumNull() {
        this[this->tablePlantGraphicsInformation->StemTopRadiusNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsStemBottomRadiusNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->StemBottomRadiusNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetStemBottomRadiusNumNull() {
        this[this->tablePlantGraphicsInformation->StemBottomRadiusNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsPetioleLengthNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->PetioleLengthNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetPetioleLengthNumNull() {
        this[this->tablePlantGraphicsInformation->PetioleLengthNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsPetioleTopRadiusNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->PetioleTopRadiusNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetPetioleTopRadiusNumNull() {
        this[this->tablePlantGraphicsInformation->PetioleTopRadiusNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsPetioleBottomRadiusNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->PetioleBottomRadiusColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetPetioleBottomRadiusNull() {
        this[this->tablePlantGraphicsInformation->PetioleBottomRadiusColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsVeinLengthNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->VeinLengthNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetVeinLengthNumNull() {
        this[this->tablePlantGraphicsInformation->VeinLengthNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsVeinTopRadiusNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->VeinTopRadiusNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetVeinTopRadiusNumNull() {
        this[this->tablePlantGraphicsInformation->VeinTopRadiusNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsVeinBottomRadiusNumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->VeinBottomRadiusNumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetVeinBottomRadiusNumNull() {
        this[this->tablePlantGraphicsInformation->VeinBottomRadiusNumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsVeinLsystemStringNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->VeinLsystemStringColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetVeinLsystemStringNull() {
        this[this->tablePlantGraphicsInformation->VeinLsystemStringColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsxRotateNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->xRotateColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetxRotateNull() {
        this[this->tablePlantGraphicsInformation->xRotateColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsyRotateNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->yRotateColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetyRotateNull() {
        this[this->tablePlantGraphicsInformation->yRotateColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IszRotateNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->zRotateColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetzRotateNull() {
        this[this->tablePlantGraphicsInformation->zRotateColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsNitrogenNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->NitrogenColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetNitrogenNull() {
        this[this->tablePlantGraphicsInformation->NitrogenColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsHydrogenNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->HydrogenColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetHydrogenNull() {
        this[this->tablePlantGraphicsInformation->HydrogenColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsPotassiumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->PotassiumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetPotassiumNull() {
        this[this->tablePlantGraphicsInformation->PotassiumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsPhosphorousNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->PhosphorousColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetPhosphorousNull() {
        this[this->tablePlantGraphicsInformation->PhosphorousColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsCalciumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->CalciumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetCalciumNull() {
        this[this->tablePlantGraphicsInformation->CalciumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsMagnesiumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->MagnesiumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetMagnesiumNull() {
        this[this->tablePlantGraphicsInformation->MagnesiumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsSulphurNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->SulphurColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetSulphurNull() {
        this[this->tablePlantGraphicsInformation->SulphurColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsChlorineNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->ChlorineColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetChlorineNull() {
        this[this->tablePlantGraphicsInformation->ChlorineColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsBoronNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->BoronColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetBoronNull() {
        this[this->tablePlantGraphicsInformation->BoronColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsIronNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->IronColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetIronNull() {
        this[this->tablePlantGraphicsInformation->IronColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsManganeseNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->ManganeseColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetManganeseNull() {
        this[this->tablePlantGraphicsInformation->ManganeseColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsZincNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->ZincColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetZincNull() {
        this[this->tablePlantGraphicsInformation->ZincColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsCopperNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->CopperColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetCopperNull() {
        this[this->tablePlantGraphicsInformation->CopperColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsSodiumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->SodiumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetSodiumNull() {
        this[this->tablePlantGraphicsInformation->SodiumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsMolybdenumNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->MolybdenumColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetMolybdenumNull() {
        this[this->tablePlantGraphicsInformation->MolybdenumColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsDivisionNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->DivisionColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetDivisionNull() {
        this[this->tablePlantGraphicsInformation->DivisionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IssubDivisionNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->subDivisionColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetsubDivisionNull() {
        this[this->tablePlantGraphicsInformation->subDivisionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsClassNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->ClassColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetClassNull() {
        this[this->tablePlantGraphicsInformation->ClassColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IssubClassNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->subClassColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetsubClassNull() {
        this[this->tablePlantGraphicsInformation->subClassColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsOrderNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->OrderColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetOrderNull() {
        this[this->tablePlantGraphicsInformation->OrderColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IssubOrderNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->subOrderColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetsubOrderNull() {
        this[this->tablePlantGraphicsInformation->subOrderColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsFamilyNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->FamilyColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetFamilyNull() {
        this[this->tablePlantGraphicsInformation->FamilyColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IssubFamilyNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->subFamilyColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetsubFamilyNull() {
        this[this->tablePlantGraphicsInformation->subFamilyColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsGenusNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->GenusColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetGenusNull() {
        this[this->tablePlantGraphicsInformation->GenusColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IssubGenusNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->subGenusColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetsubGenusNull() {
        this[this->tablePlantGraphicsInformation->subGenusColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsSpeciesNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->SpeciesColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetSpeciesNull() {
        this[this->tablePlantGraphicsInformation->SpeciesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IssubSpeciesNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->subSpeciesColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetsubSpeciesNull() {
        this[this->tablePlantGraphicsInformation->subSpeciesColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsleafLengthNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->leafLengthColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetleafLengthNull() {
        this[this->tablePlantGraphicsInformation->leafLengthColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsleafRadiusNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->leafRadiusColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetleafRadiusNull() {
        this[this->tablePlantGraphicsInformation->leafRadiusColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsfruitTypeNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->fruitTypeColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetfruitTypeNull() {
        this[this->tablePlantGraphicsInformation->fruitTypeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean PlantGraphics::PlantGraphicsInformationRow::IsflowerTypeNull() {
        return this->IsNull(this->tablePlantGraphicsInformation->flowerTypeColumn);
    }
    
    inline ::System::Void PlantGraphics::PlantGraphicsInformationRow::SetflowerTypeNull() {
        this[this->tablePlantGraphicsInformation->flowerTypeColumn] = ::System::Convert::DBNull;
    }
    
    
    inline PlantGraphics::PlantGraphicsInformationRowChangeEvent::PlantGraphicsInformationRowChangeEvent(PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline PlantCreator::PlantGraphics::PlantGraphicsInformationRow^  PlantGraphics::PlantGraphicsInformationRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction PlantGraphics::PlantGraphicsInformationRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
namespace PlantCreator {
    namespace PlantGraphicsTableAdapters {
    using namespace System;
    ref class PlantGraphicsInformationTableAdapter;
    
    
    /// <summary>
///Represents the connection and commands used to retrieve and save data.
///</summary>
    [System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::ComponentModel::DataObjectAttribute(true), 
    System::ComponentModel::DesignerAttribute(L"Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" 
L", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
    public ref class PlantGraphicsInformationTableAdapter : public ::System::ComponentModel::Component {
        
        private: ::System::Data::OleDb::OleDbDataAdapter^  _adapter;
        
        private: ::System::Data::OleDb::OleDbConnection^  _connection;
        
        private: cli::array< ::System::Data::OleDb::OleDbCommand^  >^  _commandCollection;
        
        private: ::System::Boolean _clearBeforeFill;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        PlantGraphicsInformationTableAdapter();
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::OleDb::OleDbDataAdapter^  Adapter {
            ::System::Data::OleDb::OleDbDataAdapter^  get();
        }
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::OleDb::OleDbConnection^  Connection {
            ::System::Data::OleDb::OleDbConnection^  get();
            System::Void set(::System::Data::OleDb::OleDbConnection^  value);
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property cli::array< ::System::Data::OleDb::OleDbCommand^  >^  CommandCollection {
            cli::array< ::System::Data::OleDb::OleDbCommand^  >^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Boolean ClearBeforeFill {
            ::System::Boolean get();
            System::Void set(::System::Boolean value);
        }
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitAdapter();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitConnection();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitCommandCollection();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Fill, true)]
        virtual System::Int32 Fill(PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Select, true)]
        virtual PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  GetData();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Fill, false)]
        virtual System::Int32 PlantGraphics(PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  dataTable);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(PlantCreator::PlantGraphics^  dataSet);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(::System::Data::DataRow^  dataRow);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Int32 Update(cli::array< ::System::Data::DataRow^  >^  dataRows);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Delete, true)]
        virtual System::Int32 Delete(
                    System::Int32 Original_PlantlsystemID, 
                    System::String^  Original_ScienceNameID, 
                    System::String^  Original_StemLsystemString, 
                    System::String^  Original_PetioleLsystemString, 
                    ::System::Nullable<::System::Double > Original_LeafTypeNum, 
                    ::System::Nullable<::System::Double > Original_StemLengthNum, 
                    ::System::Nullable<::System::Double > Original_StemTopRadiusNum, 
                    ::System::Nullable<::System::Double > Original_StemBottomRadiusNum, 
                    ::System::Nullable<::System::Double > Original_PetioleLengthNum, 
                    ::System::Nullable<::System::Double > Original_PetioleTopRadiusNum, 
                    ::System::Nullable<::System::Double > Original_PetioleBottomRadius, 
                    ::System::Nullable<::System::Double > Original_VeinLengthNum, 
                    ::System::Nullable<::System::Double > Original_VeinTopRadiusNum, 
                    ::System::Nullable<::System::Double > Original_VeinBottomRadiusNum, 
                    System::String^  Original_VeinLsystemString, 
                    ::System::Nullable<::System::Double > Original_xRotate, 
                    ::System::Nullable<::System::Double > Original_yRotate, 
                    ::System::Nullable<::System::Double > Original_zRotate, 
                    ::System::Nullable<::System::Double > Original_Nitrogen, 
                    ::System::Nullable<::System::Double > Original_Hydrogen, 
                    ::System::Nullable<::System::Double > Original_Potassium, 
                    ::System::Nullable<::System::Double > Original_Phosphorous, 
                    ::System::Nullable<::System::Double > Original_Calcium, 
                    ::System::Nullable<::System::Double > Original_Magnesium, 
                    ::System::Nullable<::System::Double > Original_Sulphur, 
                    ::System::Nullable<::System::Double > Original_Chlorine, 
                    ::System::Nullable<::System::Double > Original_Boron, 
                    ::System::Nullable<::System::Double > Original_Iron, 
                    ::System::Nullable<::System::Double > Original_Manganese, 
                    ::System::Nullable<::System::Double > Original_Zinc, 
                    ::System::Nullable<::System::Double > Original_Copper, 
                    ::System::Nullable<::System::Double > Original_Sodium, 
                    ::System::Nullable<::System::Double > Original_Molybdenum, 
                    System::String^  Original_Division, 
                    System::String^  Original_subDivision, 
                    System::String^  Original_Class, 
                    System::String^  Original_subClass, 
                    System::String^  Original_Order, 
                    System::String^  Original_subOrder, 
                    System::String^  Original_Family, 
                    System::String^  Original_subFamily, 
                    System::String^  Original_Genus, 
                    System::String^  Original_subGenus, 
                    System::String^  Original_Species, 
                    System::String^  Original_subSpecies, 
                    ::System::Nullable<::System::Double > Original_leafLength, 
                    ::System::Nullable<::System::Double > Original_leafRadius, 
                    ::System::Nullable<::System::Int32 > Original_fruitType, 
                    ::System::Nullable<::System::Int32 > Original_flowerType);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Insert, true)]
        virtual System::Int32 Insert(
                    System::String^  ScienceNameID, 
                    System::String^  StemLsystemString, 
                    System::String^  PetioleLsystemString, 
                    ::System::Nullable<::System::Double > LeafTypeNum, 
                    ::System::Nullable<::System::Double > StemLengthNum, 
                    ::System::Nullable<::System::Double > StemTopRadiusNum, 
                    ::System::Nullable<::System::Double > StemBottomRadiusNum, 
                    ::System::Nullable<::System::Double > PetioleLengthNum, 
                    ::System::Nullable<::System::Double > PetioleTopRadiusNum, 
                    ::System::Nullable<::System::Double > PetioleBottomRadius, 
                    ::System::Nullable<::System::Double > VeinLengthNum, 
                    ::System::Nullable<::System::Double > VeinTopRadiusNum, 
                    ::System::Nullable<::System::Double > VeinBottomRadiusNum, 
                    System::String^  VeinLsystemString, 
                    ::System::Nullable<::System::Double > xRotate, 
                    ::System::Nullable<::System::Double > yRotate, 
                    ::System::Nullable<::System::Double > zRotate, 
                    ::System::Nullable<::System::Double > Nitrogen, 
                    ::System::Nullable<::System::Double > Hydrogen, 
                    ::System::Nullable<::System::Double > Potassium, 
                    ::System::Nullable<::System::Double > Phosphorous, 
                    ::System::Nullable<::System::Double > Calcium, 
                    ::System::Nullable<::System::Double > Magnesium, 
                    ::System::Nullable<::System::Double > Sulphur, 
                    ::System::Nullable<::System::Double > Chlorine, 
                    ::System::Nullable<::System::Double > Boron, 
                    ::System::Nullable<::System::Double > Iron, 
                    ::System::Nullable<::System::Double > Manganese, 
                    ::System::Nullable<::System::Double > Zinc, 
                    ::System::Nullable<::System::Double > Copper, 
                    ::System::Nullable<::System::Double > Sodium, 
                    ::System::Nullable<::System::Double > Molybdenum, 
                    System::String^  Division, 
                    System::String^  subDivision, 
                    System::String^  Class, 
                    System::String^  subClass, 
                    System::String^  Order, 
                    System::String^  subOrder, 
                    System::String^  Family, 
                    System::String^  subFamily, 
                    System::String^  Genus, 
                    System::String^  subGenus, 
                    System::String^  Species, 
                    System::String^  subSpecies, 
                    ::System::Nullable<::System::Double > leafLength, 
                    ::System::Nullable<::System::Double > leafRadius, 
                    ::System::Nullable<::System::Int32 > fruitType, 
                    ::System::Nullable<::System::Int32 > flowerType);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        [System::ComponentModel::DataObjectMethodAttribute(::System::ComponentModel::DataObjectMethodType::Update, true)]
        virtual System::Int32 Update(
                    System::String^  ScienceNameID, 
                    System::String^  StemLsystemString, 
                    System::String^  PetioleLsystemString, 
                    ::System::Nullable<::System::Double > LeafTypeNum, 
                    ::System::Nullable<::System::Double > StemLengthNum, 
                    ::System::Nullable<::System::Double > StemTopRadiusNum, 
                    ::System::Nullable<::System::Double > StemBottomRadiusNum, 
                    ::System::Nullable<::System::Double > PetioleLengthNum, 
                    ::System::Nullable<::System::Double > PetioleTopRadiusNum, 
                    ::System::Nullable<::System::Double > PetioleBottomRadius, 
                    ::System::Nullable<::System::Double > VeinLengthNum, 
                    ::System::Nullable<::System::Double > VeinTopRadiusNum, 
                    ::System::Nullable<::System::Double > VeinBottomRadiusNum, 
                    System::String^  VeinLsystemString, 
                    ::System::Nullable<::System::Double > xRotate, 
                    ::System::Nullable<::System::Double > yRotate, 
                    ::System::Nullable<::System::Double > zRotate, 
                    ::System::Nullable<::System::Double > Nitrogen, 
                    ::System::Nullable<::System::Double > Hydrogen, 
                    ::System::Nullable<::System::Double > Potassium, 
                    ::System::Nullable<::System::Double > Phosphorous, 
                    ::System::Nullable<::System::Double > Calcium, 
                    ::System::Nullable<::System::Double > Magnesium, 
                    ::System::Nullable<::System::Double > Sulphur, 
                    ::System::Nullable<::System::Double > Chlorine, 
                    ::System::Nullable<::System::Double > Boron, 
                    ::System::Nullable<::System::Double > Iron, 
                    ::System::Nullable<::System::Double > Manganese, 
                    ::System::Nullable<::System::Double > Zinc, 
                    ::System::Nullable<::System::Double > Copper, 
                    ::System::Nullable<::System::Double > Sodium, 
                    ::System::Nullable<::System::Double > Molybdenum, 
                    System::String^  Division, 
                    System::String^  subDivision, 
                    System::String^  Class, 
                    System::String^  subClass, 
                    System::String^  Order, 
                    System::String^  subOrder, 
                    System::String^  Family, 
                    System::String^  subFamily, 
                    System::String^  Genus, 
                    System::String^  subGenus, 
                    System::String^  Species, 
                    System::String^  subSpecies, 
                    ::System::Nullable<::System::Double > leafLength, 
                    ::System::Nullable<::System::Double > leafRadius, 
                    ::System::Nullable<::System::Int32 > fruitType, 
                    ::System::Nullable<::System::Int32 > flowerType, 
                    System::Int32 Original_PlantlsystemID, 
                    System::String^  Original_ScienceNameID, 
                    System::String^  Original_StemLsystemString, 
                    System::String^  Original_PetioleLsystemString, 
                    ::System::Nullable<::System::Double > Original_LeafTypeNum, 
                    ::System::Nullable<::System::Double > Original_StemLengthNum, 
                    ::System::Nullable<::System::Double > Original_StemTopRadiusNum, 
                    ::System::Nullable<::System::Double > Original_StemBottomRadiusNum, 
                    ::System::Nullable<::System::Double > Original_PetioleLengthNum, 
                    ::System::Nullable<::System::Double > Original_PetioleTopRadiusNum, 
                    ::System::Nullable<::System::Double > Original_PetioleBottomRadius, 
                    ::System::Nullable<::System::Double > Original_VeinLengthNum, 
                    ::System::Nullable<::System::Double > Original_VeinTopRadiusNum, 
                    ::System::Nullable<::System::Double > Original_VeinBottomRadiusNum, 
                    System::String^  Original_VeinLsystemString, 
                    ::System::Nullable<::System::Double > Original_xRotate, 
                    ::System::Nullable<::System::Double > Original_yRotate, 
                    ::System::Nullable<::System::Double > Original_zRotate, 
                    ::System::Nullable<::System::Double > Original_Nitrogen, 
                    ::System::Nullable<::System::Double > Original_Hydrogen, 
                    ::System::Nullable<::System::Double > Original_Potassium, 
                    ::System::Nullable<::System::Double > Original_Phosphorous, 
                    ::System::Nullable<::System::Double > Original_Calcium, 
                    ::System::Nullable<::System::Double > Original_Magnesium, 
                    ::System::Nullable<::System::Double > Original_Sulphur, 
                    ::System::Nullable<::System::Double > Original_Chlorine, 
                    ::System::Nullable<::System::Double > Original_Boron, 
                    ::System::Nullable<::System::Double > Original_Iron, 
                    ::System::Nullable<::System::Double > Original_Manganese, 
                    ::System::Nullable<::System::Double > Original_Zinc, 
                    ::System::Nullable<::System::Double > Original_Copper, 
                    ::System::Nullable<::System::Double > Original_Sodium, 
                    ::System::Nullable<::System::Double > Original_Molybdenum, 
                    System::String^  Original_Division, 
                    System::String^  Original_subDivision, 
                    System::String^  Original_Class, 
                    System::String^  Original_subClass, 
                    System::String^  Original_Order, 
                    System::String^  Original_subOrder, 
                    System::String^  Original_Family, 
                    System::String^  Original_subFamily, 
                    System::String^  Original_Genus, 
                    System::String^  Original_subGenus, 
                    System::String^  Original_Species, 
                    System::String^  Original_subSpecies, 
                    ::System::Nullable<::System::Double > Original_leafLength, 
                    ::System::Nullable<::System::Double > Original_leafRadius, 
                    ::System::Nullable<::System::Int32 > Original_fruitType, 
                    ::System::Nullable<::System::Int32 > Original_flowerType);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryBoron(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryCalcium(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryChlorine(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryClass(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryCopper(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryDivision(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryFamily(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Int32 > ScalarQueryflowerType(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Int32 > ScalarQueryfruitType(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryGenus(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryHydrogen(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryIron(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryLeafLength(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryLeafRadius(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryLeafType(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryMagnesium(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryManganese(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryMolybdenum(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryNitrogen(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryOrder(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryPetioleLength(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryPetioleLsystem(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryPetioleRadius(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryPhosphorous(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryPotassium(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryScienceName(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQuerySodium(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQuerySpecies(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryStemLength(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryStemLsystem(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryStemRadius(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQuerysubClass(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQuerysubDivision(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQuerysubFamily(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQuerysubOrder(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::Object^  ScalarQuerySulfur(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryVeinLength(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual System::String^  ScalarQueryVeinLsystem(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryVeinRadius(System::Int32 PlantlsystemID);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        [System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.TableAdapter")]
        virtual ::System::Nullable<::System::Double > ScalarQueryZinc(System::Int32 PlantlsystemID);
    };
    }
}
namespace PlantCreator {
    namespace PlantGraphicsTableAdapters {
    
    
    inline PlantGraphicsInformationTableAdapter::PlantGraphicsInformationTableAdapter() {
        this->ClearBeforeFill = true;
    }
    
    inline ::System::Data::OleDb::OleDbDataAdapter^  PlantGraphicsInformationTableAdapter::Adapter::get() {
        if (this->_adapter == nullptr) {
            this->InitAdapter();
        }
        return this->_adapter;
    }
    
    inline ::System::Data::OleDb::OleDbConnection^  PlantGraphicsInformationTableAdapter::Connection::get() {
        if (this->_connection == nullptr) {
            this->InitConnection();
        }
        return this->_connection;
    }
    inline System::Void PlantGraphicsInformationTableAdapter::Connection::set(::System::Data::OleDb::OleDbConnection^  value) {
        this->_connection = __identifier(value);
        if (this->Adapter->InsertCommand != nullptr) {
            this->Adapter->InsertCommand->Connection = __identifier(value);
        }
        if (this->Adapter->DeleteCommand != nullptr) {
            this->Adapter->DeleteCommand->Connection = __identifier(value);
        }
        if (this->Adapter->UpdateCommand != nullptr) {
            this->Adapter->UpdateCommand->Connection = __identifier(value);
        }
        for (        ::System::Int32 i = 0; (i < this->CommandCollection->Length);         i = (i + 1)) {
            if (this->CommandCollection[i] != nullptr) {
                (cli::safe_cast<::System::Data::OleDb::OleDbCommand^  >(this->CommandCollection[i]))->Connection = __identifier(value);
            }
        }
    }
    
    inline cli::array< ::System::Data::OleDb::OleDbCommand^  >^  PlantGraphicsInformationTableAdapter::CommandCollection::get() {
        if (this->_commandCollection == nullptr) {
            this->InitCommandCollection();
        }
        return this->_commandCollection;
    }
    
    inline ::System::Boolean PlantGraphicsInformationTableAdapter::ClearBeforeFill::get() {
        return this->_clearBeforeFill;
    }
    inline System::Void PlantGraphicsInformationTableAdapter::ClearBeforeFill::set(::System::Boolean value) {
        this->_clearBeforeFill = __identifier(value);
    }
    
    inline ::System::Void PlantGraphicsInformationTableAdapter::InitAdapter() {
        this->_adapter = (gcnew ::System::Data::OleDb::OleDbDataAdapter());
        ::System::Data::Common::DataTableMapping^  tableMapping = (gcnew ::System::Data::Common::DataTableMapping());
        tableMapping->SourceTable = L"Table";
        tableMapping->DataSetTable = L"PlantGraphicsInformation";
        tableMapping->ColumnMappings->Add(L"PlantlsystemID", L"PlantlsystemID");
        tableMapping->ColumnMappings->Add(L"ScienceNameID", L"ScienceNameID");
        tableMapping->ColumnMappings->Add(L"StemLsystemString", L"StemLsystemString");
        tableMapping->ColumnMappings->Add(L"PetioleLsystemString", L"PetioleLsystemString");
        tableMapping->ColumnMappings->Add(L"LeafTypeNum", L"LeafTypeNum");
        tableMapping->ColumnMappings->Add(L"StemLengthNum", L"StemLengthNum");
        tableMapping->ColumnMappings->Add(L"StemTopRadiusNum", L"StemTopRadiusNum");
        tableMapping->ColumnMappings->Add(L"StemBottomRadiusNum", L"StemBottomRadiusNum");
        tableMapping->ColumnMappings->Add(L"PetioleLengthNum", L"PetioleLengthNum");
        tableMapping->ColumnMappings->Add(L"PetioleTopRadiusNum", L"PetioleTopRadiusNum");
        tableMapping->ColumnMappings->Add(L"PetioleBottomRadius", L"PetioleBottomRadius");
        tableMapping->ColumnMappings->Add(L"VeinLengthNum", L"VeinLengthNum");
        tableMapping->ColumnMappings->Add(L"VeinTopRadiusNum", L"VeinTopRadiusNum");
        tableMapping->ColumnMappings->Add(L"VeinBottomRadiusNum", L"VeinBottomRadiusNum");
        tableMapping->ColumnMappings->Add(L"VeinLsystemString", L"VeinLsystemString");
        tableMapping->ColumnMappings->Add(L"xRotate", L"xRotate");
        tableMapping->ColumnMappings->Add(L"yRotate", L"yRotate");
        tableMapping->ColumnMappings->Add(L"zRotate", L"zRotate");
        tableMapping->ColumnMappings->Add(L"Nitrogen", L"Nitrogen");
        tableMapping->ColumnMappings->Add(L"Hydrogen", L"Hydrogen");
        tableMapping->ColumnMappings->Add(L"Potassium", L"Potassium");
        tableMapping->ColumnMappings->Add(L"Phosphorous", L"Phosphorous");
        tableMapping->ColumnMappings->Add(L"Calcium", L"Calcium");
        tableMapping->ColumnMappings->Add(L"Magnesium", L"Magnesium");
        tableMapping->ColumnMappings->Add(L"Sulphur", L"Sulphur");
        tableMapping->ColumnMappings->Add(L"Chlorine", L"Chlorine");
        tableMapping->ColumnMappings->Add(L"Boron", L"Boron");
        tableMapping->ColumnMappings->Add(L"Iron", L"Iron");
        tableMapping->ColumnMappings->Add(L"Manganese", L"Manganese");
        tableMapping->ColumnMappings->Add(L"Zinc", L"Zinc");
        tableMapping->ColumnMappings->Add(L"Copper", L"Copper");
        tableMapping->ColumnMappings->Add(L"Sodium", L"Sodium");
        tableMapping->ColumnMappings->Add(L"Molybdenum", L"Molybdenum");
        tableMapping->ColumnMappings->Add(L"Division", L"Division");
        tableMapping->ColumnMappings->Add(L"subDivision", L"subDivision");
        tableMapping->ColumnMappings->Add(L"Class", L"Class");
        tableMapping->ColumnMappings->Add(L"subClass", L"subClass");
        tableMapping->ColumnMappings->Add(L"Order", L"Order");
        tableMapping->ColumnMappings->Add(L"subOrder", L"subOrder");
        tableMapping->ColumnMappings->Add(L"Family", L"Family");
        tableMapping->ColumnMappings->Add(L"subFamily", L"subFamily");
        tableMapping->ColumnMappings->Add(L"Genus", L"Genus");
        tableMapping->ColumnMappings->Add(L"subGenus", L"subGenus");
        tableMapping->ColumnMappings->Add(L"Species", L"Species");
        tableMapping->ColumnMappings->Add(L"subSpecies", L"subSpecies");
        tableMapping->ColumnMappings->Add(L"leafLength", L"leafLength");
        tableMapping->ColumnMappings->Add(L"leafRadius", L"leafRadius");
        tableMapping->ColumnMappings->Add(L"fruitType", L"fruitType");
        tableMapping->ColumnMappings->Add(L"flowerType", L"flowerType");
        this->_adapter->TableMappings->Add(tableMapping);
        this->_adapter->DeleteCommand = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_adapter->DeleteCommand->Connection = this->Connection;
        this->_adapter->DeleteCommand->CommandText = L"DELETE FROM `PlantGraphicsInformation` WHERE ((`PlantlsystemID` = \?) AND ((\? = 1 " 
L"AND `ScienceNameID` IS NULL) OR (`ScienceNameID` = \?)) AND ((\? = 1 AND `StemLsys" 
L"temString` IS NULL) OR (`StemLsystemString` = \?)) AND ((\? = 1 AND `PetioleLsyste" 
L"mString` IS NULL) OR (`PetioleLsystemString` = \?)) AND ((\? = 1 AND `LeafTypeNum`" 
L" IS NULL) OR (`LeafTypeNum` = \?)) AND ((\? = 1 AND `StemLengthNum` IS NULL) OR (`" 
L"StemLengthNum` = \?)) AND ((\? = 1 AND `StemTopRadiusNum` IS NULL) OR (`StemTopRad" 
L"iusNum` = \?)) AND ((\? = 1 AND `StemBottomRadiusNum` IS NULL) OR (`StemBottomRadi" 
L"usNum` = \?)) AND ((\? = 1 AND `PetioleLengthNum` IS NULL) OR (`PetioleLengthNum` " 
L"= \?)) AND ((\? = 1 AND `PetioleTopRadiusNum` IS NULL) OR (`PetioleTopRadiusNum` =" 
L" \?)) AND ((\? = 1 AND `PetioleBottomRadius` IS NULL) OR (`PetioleBottomRadius` = " 
L"\?)) AND ((\? = 1 AND `VeinLengthNum` IS NULL) OR (`VeinLengthNum` = \?)) AND ((\? =" 
L" 1 AND `VeinTopRadiusNum` IS NULL) OR (`VeinTopRadiusNum` = \?)) AND ((\? = 1 AND " 
L"`VeinBottomRadiusNum` IS NULL) OR (`VeinBottomRadiusNum` = \?)) AND ((\? = 1 AND `" 
L"VeinLsystemString` IS NULL) OR (`VeinLsystemString` = \?)) AND ((\? = 1 AND `xRota" 
L"te` IS NULL) OR (`xRotate` = \?)) AND ((\? = 1 AND `yRotate` IS NULL) OR (`yRotate" 
L"` = \?)) AND ((\? = 1 AND `zRotate` IS NULL) OR (`zRotate` = \?)) AND ((\? = 1 AND `" 
L"Nitrogen` IS NULL) OR (`Nitrogen` = \?)) AND ((\? = 1 AND `Hydrogen` IS NULL) OR (" 
L"`Hydrogen` = \?)) AND ((\? = 1 AND `Potassium` IS NULL) OR (`Potassium` = \?)) AND " 
L"((\? = 1 AND `Phosphorous` IS NULL) OR (`Phosphorous` = \?)) AND ((\? = 1 AND `Calc" 
L"ium` IS NULL) OR (`Calcium` = \?)) AND ((\? = 1 AND `Magnesium` IS NULL) OR (`Magn" 
L"esium` = \?)) AND ((\? = 1 AND `Sulphur` IS NULL) OR (`Sulphur` = \?)) AND ((\? = 1 " 
L"AND `Chlorine` IS NULL) OR (`Chlorine` = \?)) AND ((\? = 1 AND `Boron` IS NULL) OR" 
L" (`Boron` = \?)) AND ((\? = 1 AND `Iron` IS NULL) OR (`Iron` = \?)) AND ((\? = 1 AND" 
L" `Manganese` IS NULL) OR (`Manganese` = \?)) AND ((\? = 1 AND `Zinc` IS NULL) OR (" 
L"`Zinc` = \?)) AND ((\? = 1 AND `Copper` IS NULL) OR (`Copper` = \?)) AND ((\? = 1 AN" 
L"D `Sodium` IS NULL) OR (`Sodium` = \?)) AND ((\? = 1 AND `Molybdenum` IS NULL) OR " 
L"(`Molybdenum` = \?)) AND ((\? = 1 AND `Division` IS NULL) OR (`Division` = \?)) AND" 
L" ((\? = 1 AND `subDivision` IS NULL) OR (`subDivision` = \?)) AND ((\? = 1 AND `Cla" 
L"ss` IS NULL) OR (`Class` = \?)) AND ((\? = 1 AND `subClass` IS NULL) OR (`subClass" 
L"` = \?)) AND ((\? = 1 AND `Order` IS NULL) OR (`Order` = \?)) AND ((\? = 1 AND `subO" 
L"rder` IS NULL) OR (`subOrder` = \?)) AND ((\? = 1 AND `Family` IS NULL) OR (`Famil" 
L"y` = \?)) AND ((\? = 1 AND `subFamily` IS NULL) OR (`subFamily` = \?)) AND ((\? = 1 " 
L"AND `Genus` IS NULL) OR (`Genus` = \?)) AND ((\? = 1 AND `subGenus` IS NULL) OR (`" 
L"subGenus` = \?)) AND ((\? = 1 AND `Species` IS NULL) OR (`Species` = \?)) AND ((\? =" 
L" 1 AND `subSpecies` IS NULL) OR (`subSpecies` = \?)) AND ((\? = 1 AND `leafLength`" 
L" IS NULL) OR (`leafLength` = \?)) AND ((\? = 1 AND `leafRadius` IS NULL) OR (`leaf" 
L"Radius` = \?)) AND ((\? = 1 AND `fruitType` IS NULL) OR (`fruitType` = \?)) AND ((\?" 
L" = 1 AND `flowerType` IS NULL) OR (`flowerType` = \?)))";
        this->_adapter->DeleteCommand->CommandType = ::System::Data::CommandType::Text;
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PlantlsystemID", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PlantlsystemID", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_ScienceNameID", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"ScienceNameID", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_ScienceNameID", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"ScienceNameID", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemLsystemString", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLsystemString", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLsystemString", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleLsystemString", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLsystemString", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLsystemString", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_LeafTypeNum", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"LeafTypeNum", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_LeafTypeNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"LeafTypeNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemLengthNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLengthNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemLengthNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLengthNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemTopRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemTopRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemBottomRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemBottomRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleLengthNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLengthNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleLengthNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLengthNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleTopRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleTopRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleBottomRadius", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleBottomRadius", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleBottomRadius", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleBottomRadius", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinLengthNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLengthNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinLengthNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLengthNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinTopRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinTopRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinBottomRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinBottomRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinLsystemString", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLsystemString", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLsystemString", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_xRotate", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"xRotate", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_xRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"xRotate", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_yRotate", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"yRotate", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_yRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"yRotate", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_zRotate", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"zRotate", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_zRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"zRotate", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Nitrogen", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Nitrogen", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Nitrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Nitrogen", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Hydrogen", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Hydrogen", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Hydrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Hydrogen", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Potassium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Potassium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Potassium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Potassium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Phosphorous", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Phosphorous", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Phosphorous", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"Phosphorous", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Calcium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Calcium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Calcium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Calcium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Magnesium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Magnesium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Magnesium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Magnesium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Sulphur", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sulphur", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Sulphur", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sulphur", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Chlorine", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Chlorine", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Chlorine", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Chlorine", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Boron", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Boron", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Boron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Boron", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Iron", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Iron", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Iron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Iron", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Manganese", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Manganese", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Manganese", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Manganese", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Zinc", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Zinc", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Zinc", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Zinc", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Copper", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Copper", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Copper", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Copper", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Sodium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sodium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Sodium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sodium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Molybdenum", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Molybdenum", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Molybdenum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Molybdenum", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Division", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Division", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Division", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Division", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subDivision", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subDivision", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subDivision", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"subDivision", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Class", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Class", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Class", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Class", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subClass", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subClass", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subClass", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subClass", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Order", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Order", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Order", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Order", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subOrder", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subOrder", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subOrder", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subOrder", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Family", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Family", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Family", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Family", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subFamily", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subFamily", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subFamily", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subFamily", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Genus", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Genus", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Genus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Genus", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subGenus", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subGenus", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subGenus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subGenus", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Species", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Species", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Species", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Species", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subSpecies", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subSpecies", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subSpecies", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subSpecies", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_leafLength", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafLength", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_leafLength", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafLength", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_leafRadius", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafRadius", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_leafRadius", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafRadius", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_fruitType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"fruitType", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_fruitType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"fruitType", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_flowerType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"flowerType", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->DeleteCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_flowerType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"flowerType", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->InsertCommand = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_adapter->InsertCommand->Connection = this->Connection;
        this->_adapter->InsertCommand->CommandText = L"INSERT INTO `PlantGraphicsInformation` (`ScienceNameID`, `StemLsystemString`, `Pe" 
L"tioleLsystemString`, `LeafTypeNum`, `StemLengthNum`, `StemTopRadiusNum`, `StemBo" 
L"ttomRadiusNum`, `PetioleLengthNum`, `PetioleTopRadiusNum`, `PetioleBottomRadius`" 
L", `VeinLengthNum`, `VeinTopRadiusNum`, `VeinBottomRadiusNum`, `VeinLsystemString" 
L"`, `xRotate`, `yRotate`, `zRotate`, `Nitrogen`, `Hydrogen`, `Potassium`, `Phosph" 
L"orous`, `Calcium`, `Magnesium`, `Sulphur`, `Chlorine`, `Boron`, `Iron`, `Mangane" 
L"se`, `Zinc`, `Copper`, `Sodium`, `Molybdenum`, `Division`, `subDivision`, `Class" 
L"`, `subClass`, `Order`, `subOrder`, `Family`, `subFamily`, `Genus`, `subGenus`, " 
L"`Species`, `subSpecies`, `leafLength`, `leafRadius`, `fruitType`, `flowerType`) " 
L"VALUES (\?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, " 
L"\?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?, \?)";
        this->_adapter->InsertCommand->CommandType = ::System::Data::CommandType::Text;
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"ScienceNameID", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"ScienceNameID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemLsystemString", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemLsystemString", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLsystemString", ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"LeafTypeNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"LeafTypeNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemLengthNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemLengthNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemTopRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemTopRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemBottomRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemBottomRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleLengthNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PetioleLengthNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleTopRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PetioleTopRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleBottomRadius", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PetioleBottomRadius", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinLengthNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinLengthNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinTopRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinTopRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinBottomRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinBottomRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinLsystemString", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinLsystemString", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"xRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"xRotate", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"yRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"yRotate", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"zRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"zRotate", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Nitrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Nitrogen", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Hydrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Hydrogen", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Potassium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Potassium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Phosphorous", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Phosphorous", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Calcium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Calcium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Magnesium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Magnesium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Sulphur", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sulphur", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Chlorine", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Chlorine", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Boron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Boron", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Iron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Iron", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Manganese", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Manganese", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Zinc", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Zinc", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Copper", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Copper", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Sodium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sodium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Molybdenum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Molybdenum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Division", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Division", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subDivision", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subDivision", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Class", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Class", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subClass", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subClass", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Order", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Order", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subOrder", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subOrder", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Family", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Family", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subFamily", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subFamily", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Genus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Genus", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subGenus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subGenus", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Species", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Species", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subSpecies", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subSpecies", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"leafLength", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafLength", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"leafRadius", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafRadius", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"fruitType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"fruitType", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->InsertCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"flowerType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"flowerType", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_adapter->UpdateCommand->Connection = this->Connection;
        this->_adapter->UpdateCommand->CommandText = L"UPDATE `PlantGraphicsInformation` SET `ScienceNameID` = \?, `StemLsystemString` = " 
L"\?, `PetioleLsystemString` = \?, `LeafTypeNum` = \?, `StemLengthNum` = \?, `StemTopR" 
L"adiusNum` = \?, `StemBottomRadiusNum` = \?, `PetioleLengthNum` = \?, `PetioleTopRad" 
L"iusNum` = \?, `PetioleBottomRadius` = \?, `VeinLengthNum` = \?, `VeinTopRadiusNum` " 
L"= \?, `VeinBottomRadiusNum` = \?, `VeinLsystemString` = \?, `xRotate` = \?, `yRotate" 
L"` = \?, `zRotate` = \?, `Nitrogen` = \?, `Hydrogen` = \?, `Potassium` = \?, `Phosphor" 
L"ous` = \?, `Calcium` = \?, `Magnesium` = \?, `Sulphur` = \?, `Chlorine` = \?, `Boron`" 
L" = \?, `Iron` = \?, `Manganese` = \?, `Zinc` = \?, `Copper` = \?, `Sodium` = \?, `Moly" 
L"bdenum` = \?, `Division` = \?, `subDivision` = \?, `Class` = \?, `subClass` = \?, `Or" 
L"der` = \?, `subOrder` = \?, `Family` = \?, `subFamily` = \?, `Genus` = \?, `subGenus`" 
L" = \?, `Species` = \?, `subSpecies` = \?, `leafLength` = \?, `leafRadius` = \?, `frui" 
L"tType` = \?, `flowerType` = \? WHERE ((`PlantlsystemID` = \?) AND ((\? = 1 AND `Scie" 
L"nceNameID` IS NULL) OR (`ScienceNameID` = \?)) AND ((\? = 1 AND `StemLsystemString" 
L"` IS NULL) OR (`StemLsystemString` = \?)) AND ((\? = 1 AND `PetioleLsystemString` " 
L"IS NULL) OR (`PetioleLsystemString` = \?)) AND ((\? = 1 AND `LeafTypeNum` IS NULL)" 
L" OR (`LeafTypeNum` = \?)) AND ((\? = 1 AND `StemLengthNum` IS NULL) OR (`StemLengt" 
L"hNum` = \?)) AND ((\? = 1 AND `StemTopRadiusNum` IS NULL) OR (`StemTopRadiusNum` =" 
L" \?)) AND ((\? = 1 AND `StemBottomRadiusNum` IS NULL) OR (`StemBottomRadiusNum` = " 
L"\?)) AND ((\? = 1 AND `PetioleLengthNum` IS NULL) OR (`PetioleLengthNum` = \?)) AND" 
L" ((\? = 1 AND `PetioleTopRadiusNum` IS NULL) OR (`PetioleTopRadiusNum` = \?)) AND " 
L"((\? = 1 AND `PetioleBottomRadius` IS NULL) OR (`PetioleBottomRadius` = \?)) AND (" 
L"(\? = 1 AND `VeinLengthNum` IS NULL) OR (`VeinLengthNum` = \?)) AND ((\? = 1 AND `V" 
L"einTopRadiusNum` IS NULL) OR (`VeinTopRadiusNum` = \?)) AND ((\? = 1 AND `VeinBott" 
L"omRadiusNum` IS NULL) OR (`VeinBottomRadiusNum` = \?)) AND ((\? = 1 AND `VeinLsyst" 
L"emString` IS NULL) OR (`VeinLsystemString` = \?)) AND ((\? = 1 AND `xRotate` IS NU" 
L"LL) OR (`xRotate` = \?)) AND ((\? = 1 AND `yRotate` IS NULL) OR (`yRotate` = \?)) A" 
L"ND ((\? = 1 AND `zRotate` IS NULL) OR (`zRotate` = \?)) AND ((\? = 1 AND `Nitrogen`" 
L" IS NULL) OR (`Nitrogen` = \?)) AND ((\? = 1 AND `Hydrogen` IS NULL) OR (`Hydrogen" 
L"` = \?)) AND ((\? = 1 AND `Potassium` IS NULL) OR (`Potassium` = \?)) AND ((\? = 1 A" 
L"ND `Phosphorous` IS NULL) OR (`Phosphorous` = \?)) AND ((\? = 1 AND `Calcium` IS N" 
L"ULL) OR (`Calcium` = \?)) AND ((\? = 1 AND `Magnesium` IS NULL) OR (`Magnesium` = " 
L"\?)) AND ((\? = 1 AND `Sulphur` IS NULL) OR (`Sulphur` = \?)) AND ((\? = 1 AND `Chlo" 
L"rine` IS NULL) OR (`Chlorine` = \?)) AND ((\? = 1 AND `Boron` IS NULL) OR (`Boron`" 
L" = \?)) AND ((\? = 1 AND `Iron` IS NULL) OR (`Iron` = \?)) AND ((\? = 1 AND `Mangane" 
L"se` IS NULL) OR (`Manganese` = \?)) AND ((\? = 1 AND `Zinc` IS NULL) OR (`Zinc` = " 
L"\?)) AND ((\? = 1 AND `Copper` IS NULL) OR (`Copper` = \?)) AND ((\? = 1 AND `Sodium" 
L"` IS NULL) OR (`Sodium` = \?)) AND ((\? = 1 AND `Molybdenum` IS NULL) OR (`Molybde" 
L"num` = \?)) AND ((\? = 1 AND `Division` IS NULL) OR (`Division` = \?)) AND ((\? = 1 " 
L"AND `subDivision` IS NULL) OR (`subDivision` = \?)) AND ((\? = 1 AND `Class` IS NU" 
L"LL) OR (`Class` = \?)) AND ((\? = 1 AND `subClass` IS NULL) OR (`subClass` = \?)) A" 
L"ND ((\? = 1 AND `Order` IS NULL) OR (`Order` = \?)) AND ((\? = 1 AND `subOrder` IS " 
L"NULL) OR (`subOrder` = \?)) AND ((\? = 1 AND `Family` IS NULL) OR (`Family` = \?)) " 
L"AND ((\? = 1 AND `subFamily` IS NULL) OR (`subFamily` = \?)) AND ((\? = 1 AND `Genu" 
L"s` IS NULL) OR (`Genus` = \?)) AND ((\? = 1 AND `subGenus` IS NULL) OR (`subGenus`" 
L" = \?)) AND ((\? = 1 AND `Species` IS NULL) OR (`Species` = \?)) AND ((\? = 1 AND `s" 
L"ubSpecies` IS NULL) OR (`subSpecies` = \?)) AND ((\? = 1 AND `leafLength` IS NULL)" 
L" OR (`leafLength` = \?)) AND ((\? = 1 AND `leafRadius` IS NULL) OR (`leafRadius` =" 
L" \?)) AND ((\? = 1 AND `fruitType` IS NULL) OR (`fruitType` = \?)) AND ((\? = 1 AND " 
L"`flowerType` IS NULL) OR (`flowerType` = \?)))";
        this->_adapter->UpdateCommand->CommandType = ::System::Data::CommandType::Text;
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"ScienceNameID", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"ScienceNameID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemLsystemString", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemLsystemString", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLsystemString", ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"LeafTypeNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"LeafTypeNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemLengthNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemLengthNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemTopRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemTopRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"StemBottomRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"StemBottomRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleLengthNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PetioleLengthNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleTopRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PetioleTopRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PetioleBottomRadius", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PetioleBottomRadius", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinLengthNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinLengthNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinTopRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinTopRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinBottomRadiusNum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinBottomRadiusNum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"VeinLsystemString", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"VeinLsystemString", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"xRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"xRotate", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"yRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"yRotate", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"zRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"zRotate", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Nitrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Nitrogen", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Hydrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Hydrogen", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Potassium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Potassium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Phosphorous", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Phosphorous", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Calcium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Calcium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Magnesium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Magnesium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Sulphur", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sulphur", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Chlorine", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Chlorine", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Boron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Boron", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Iron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Iron", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Manganese", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Manganese", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Zinc", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Zinc", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Copper", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Copper", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Sodium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sodium", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Molybdenum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Molybdenum", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Division", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Division", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subDivision", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subDivision", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Class", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Class", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subClass", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subClass", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Order", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Order", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subOrder", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subOrder", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Family", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Family", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subFamily", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subFamily", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Genus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Genus", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subGenus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subGenus", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Species", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Species", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"subSpecies", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subSpecies", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"leafLength", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafLength", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"leafRadius", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafRadius", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"fruitType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"fruitType", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"flowerType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"flowerType", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PlantlsystemID", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PlantlsystemID", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_ScienceNameID", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"ScienceNameID", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_ScienceNameID", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"ScienceNameID", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemLsystemString", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLsystemString", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLsystemString", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleLsystemString", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLsystemString", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLsystemString", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_LeafTypeNum", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"LeafTypeNum", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_LeafTypeNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"LeafTypeNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemLengthNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLengthNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemLengthNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemLengthNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemTopRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemTopRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_StemBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemBottomRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_StemBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"StemBottomRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleLengthNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLengthNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleLengthNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleLengthNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleTopRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleTopRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_PetioleBottomRadius", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleBottomRadius", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_PetioleBottomRadius", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"PetioleBottomRadius", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinLengthNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLengthNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinLengthNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLengthNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinTopRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinTopRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinTopRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinBottomRadiusNum", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinBottomRadiusNum", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinBottomRadiusNum", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_VeinLsystemString", 
                ::System::Data::OleDb::OleDbType::Integer, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLsystemString", ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_VeinLsystemString", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"VeinLsystemString", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_xRotate", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"xRotate", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_xRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"xRotate", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_yRotate", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"yRotate", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_yRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"yRotate", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_zRotate", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"zRotate", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_zRotate", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"zRotate", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Nitrogen", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Nitrogen", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Nitrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Nitrogen", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Hydrogen", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Hydrogen", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Hydrogen", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Hydrogen", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Potassium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Potassium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Potassium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Potassium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Phosphorous", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Phosphorous", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Phosphorous", 
                ::System::Data::OleDb::OleDbType::Double, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"Phosphorous", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Calcium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Calcium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Calcium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Calcium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Magnesium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Magnesium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Magnesium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Magnesium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Sulphur", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sulphur", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Sulphur", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sulphur", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Chlorine", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Chlorine", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Chlorine", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Chlorine", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Boron", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Boron", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Boron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Boron", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Iron", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Iron", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Iron", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Iron", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Manganese", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Manganese", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Manganese", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Manganese", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Zinc", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Zinc", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Zinc", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Zinc", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Copper", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Copper", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Copper", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Copper", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Sodium", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sodium", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Sodium", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Sodium", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Molybdenum", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Molybdenum", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Molybdenum", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Molybdenum", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Division", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Division", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Division", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Division", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subDivision", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subDivision", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subDivision", 
                ::System::Data::OleDb::OleDbType::VarWChar, 0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), 
                static_cast<::System::Byte>(0), L"subDivision", ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Class", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Class", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Class", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Class", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subClass", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subClass", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subClass", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subClass", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Order", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Order", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Order", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Order", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subOrder", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subOrder", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subOrder", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subOrder", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Family", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Family", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Family", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Family", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subFamily", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subFamily", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subFamily", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subFamily", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Genus", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Genus", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Genus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Genus", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subGenus", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subGenus", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subGenus", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subGenus", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_Species", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Species", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_Species", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"Species", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_subSpecies", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subSpecies", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_subSpecies", ::System::Data::OleDb::OleDbType::VarWChar, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"subSpecies", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_leafLength", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafLength", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_leafLength", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafLength", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_leafRadius", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafRadius", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_leafRadius", ::System::Data::OleDb::OleDbType::Double, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"leafRadius", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_fruitType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"fruitType", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_fruitType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"fruitType", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"IsNull_flowerType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"flowerType", 
                ::System::Data::DataRowVersion::Original, true, nullptr)));
        this->_adapter->UpdateCommand->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"Original_flowerType", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"flowerType", 
                ::System::Data::DataRowVersion::Original, false, nullptr)));
    }
    
    inline ::System::Void PlantGraphicsInformationTableAdapter::InitConnection() {
        this->_connection = (gcnew ::System::Data::OleDb::OleDbConnection());
        this->_connection->ConnectionString = L"Provider=Microsoft.Jet.OLEDB.4.0;Data Source=\"C:\\Users\\Tina\\Documents\\Visual Stud" 
L"io 2008\\Projects\\PlantCreator\\PlantCreator\\plantsampledb.mdb\"";
    }
    
    inline ::System::Void PlantGraphicsInformationTableAdapter::InitCommandCollection() {
        this->_commandCollection = gcnew cli::array< ::System::Data::OleDb::OleDbCommand^  >(42);
        this->_commandCollection[0] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[0]->Connection = this->Connection;
        this->_commandCollection[0]->CommandText = L"SELECT PlantlsystemID, ScienceNameID, StemLsystemString, PetioleLsystemString, Le" 
L"afTypeNum, StemLengthNum, StemTopRadiusNum, StemBottomRadiusNum, PetioleLengthNu" 
L"m, PetioleTopRadiusNum, PetioleBottomRadius, VeinLengthNum, VeinTopRadiusNum, Ve" 
L"inBottomRadiusNum, VeinLsystemString, xRotate, yRotate, zRotate, Nitrogen, Hydro" 
L"gen, Potassium, Phosphorous, Calcium, Magnesium, Sulphur, Chlorine, Boron, Iron," 
L" Manganese, Zinc, Copper, Sodium, Molybdenum, Division, subDivision, Class, subC" 
L"lass, [Order], subOrder, Family, subFamily, Genus, subGenus, Species, subSpecies" 
L", leafLength, leafRadius, fruitType, flowerType FROM PlantGraphicsInformation";
        this->_commandCollection[0]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[1] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[1]->Connection = this->Connection;
        this->_commandCollection[1]->CommandText = L"SELECT PlantlsystemID, ScienceNameID, StemLsystemString, PetioleLsystemString, Le" 
L"afTypeNum, StemLengthNum, StemTopRadiusNum, StemBottomRadiusNum, PetioleLengthNu" 
L"m, PetioleTopRadiusNum, PetioleBottomRadius, VeinLengthNum, VeinTopRadiusNum, Ve" 
L"inBottomRadiusNum, VeinLsystemString, xRotate, yRotate, zRotate, Nitrogen, Hydro" 
L"gen, Potassium, Phosphorous, Calcium, Magnesium, Sulphur, Chlorine, Boron, Iron," 
L" Manganese, Zinc, Copper, Sodium, Molybdenum, Division, subDivision, Class, subC" 
L"lass, [Order], subOrder, Family, subFamily, Genus, subGenus, Species, subSpecies" 
L", leafLength, leafRadius, fruitType, flowerType FROM PlantGraphicsInformation";
        this->_commandCollection[1]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[2] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[2]->Connection = this->Connection;
        this->_commandCollection[2]->CommandText = L"SELECT Boron\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[2]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[2]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[3] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[3]->Connection = this->Connection;
        this->_commandCollection[3]->CommandText = L"SELECT Calcium\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[3]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[3]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[4] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[4]->Connection = this->Connection;
        this->_commandCollection[4]->CommandText = L"SELECT Chlorine\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[4]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[4]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[5] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[5]->Connection = this->Connection;
        this->_commandCollection[5]->CommandText = L"SELECT Class\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[5]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[5]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[6] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[6]->Connection = this->Connection;
        this->_commandCollection[6]->CommandText = L"SELECT Copper\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[6]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[6]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[7] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[7]->Connection = this->Connection;
        this->_commandCollection[7]->CommandText = L"SELECT Division\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[7]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[7]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[8] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[8]->Connection = this->Connection;
        this->_commandCollection[8]->CommandText = L"SELECT Family\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[8]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[8]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[9] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[9]->Connection = this->Connection;
        this->_commandCollection[9]->CommandText = L"SELECT flowerType\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?" 
L")";
        this->_commandCollection[9]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[9]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[10] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[10]->Connection = this->Connection;
        this->_commandCollection[10]->CommandText = L"SELECT fruitType\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)" 
L"";
        this->_commandCollection[10]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[10]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[11] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[11]->Connection = this->Connection;
        this->_commandCollection[11]->CommandText = L"SELECT Genus\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[11]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[11]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[12] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[12]->Connection = this->Connection;
        this->_commandCollection[12]->CommandText = L"SELECT Hydrogen\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[12]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[12]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[13] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[13]->Connection = this->Connection;
        this->_commandCollection[13]->CommandText = L"SELECT Iron\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[13]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[13]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[14] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[14]->Connection = this->Connection;
        this->_commandCollection[14]->CommandText = L"SELECT LeafLength\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?" 
L")";
        this->_commandCollection[14]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[14]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[15] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[15]->Connection = this->Connection;
        this->_commandCollection[15]->CommandText = L"SELECT LeafRadius\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?" 
L")";
        this->_commandCollection[15]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[15]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[16] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[16]->Connection = this->Connection;
        this->_commandCollection[16]->CommandText = L"SELECT LeafTypeNum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = " 
L"\?)";
        this->_commandCollection[16]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[16]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[17] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[17]->Connection = this->Connection;
        this->_commandCollection[17]->CommandText = L"SELECT Magnesium\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)" 
L"";
        this->_commandCollection[17]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[17]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[18] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[18]->Connection = this->Connection;
        this->_commandCollection[18]->CommandText = L"SELECT Manganese\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)" 
L"";
        this->_commandCollection[18]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[18]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[19] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[19]->Connection = this->Connection;
        this->_commandCollection[19]->CommandText = L"SELECT Molybdenum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?" 
L")";
        this->_commandCollection[19]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[19]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[20] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[20]->Connection = this->Connection;
        this->_commandCollection[20]->CommandText = L"SELECT Nitrogen\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[20]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[20]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[21] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[21]->Connection = this->Connection;
        this->_commandCollection[21]->CommandText = L"SELECT [Order]\r\nFROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[21]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[21]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[22] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[22]->Connection = this->Connection;
        this->_commandCollection[22]->CommandText = L"SELECT PetioleLengthNum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (Plantlsystem" 
L"ID = \?)";
        this->_commandCollection[22]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[22]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[23] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[23]->Connection = this->Connection;
        this->_commandCollection[23]->CommandText = L"SELECT PetioleLsystemString\r\n FROM     PlantGraphicsInformation\r\nWHERE  (Plantlsy" 
L"stemID = \?)";
        this->_commandCollection[23]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[23]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[24] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[24]->Connection = this->Connection;
        this->_commandCollection[24]->CommandText = L"SELECT PetioleTopRadiusNum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (Plantlsys" 
L"temID = \?)";
        this->_commandCollection[24]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[24]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[25] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[25]->Connection = this->Connection;
        this->_commandCollection[25]->CommandText = L"SELECT Phosphorous\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = " 
L"\?)";
        this->_commandCollection[25]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[25]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[26] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[26]->Connection = this->Connection;
        this->_commandCollection[26]->CommandText = L"SELECT Potassium\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)" 
L"";
        this->_commandCollection[26]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[26]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[27] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[27]->Connection = this->Connection;
        this->_commandCollection[27]->CommandText = L"SELECT ScienceNameID\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID " 
L"= \?)";
        this->_commandCollection[27]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[27]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[28] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[28]->Connection = this->Connection;
        this->_commandCollection[28]->CommandText = L"SELECT Sodium\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[28]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[28]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[29] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[29]->Connection = this->Connection;
        this->_commandCollection[29]->CommandText = L"SELECT Species\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[29]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[29]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[30] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[30]->Connection = this->Connection;
        this->_commandCollection[30]->CommandText = L"SELECT StemLengthNum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID " 
L"= \?)";
        this->_commandCollection[30]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[30]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[31] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[31]->Connection = this->Connection;
        this->_commandCollection[31]->CommandText = L"SELECT StemLsystemString\r\n FROM     PlantGraphicsInformation\r\nWHERE  (Plantlsyste" 
L"mID = \?)";
        this->_commandCollection[31]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[31]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[32] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[32]->Connection = this->Connection;
        this->_commandCollection[32]->CommandText = L"SELECT StemTopRadiusNum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (Plantlsystem" 
L"ID = \?)";
        this->_commandCollection[32]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[32]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[33] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[33]->Connection = this->Connection;
        this->_commandCollection[33]->CommandText = L"SELECT subClass\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[33]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[33]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[34] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[34]->Connection = this->Connection;
        this->_commandCollection[34]->CommandText = L"SELECT subDivision\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = " 
L"\?)";
        this->_commandCollection[34]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[34]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[35] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[35]->Connection = this->Connection;
        this->_commandCollection[35]->CommandText = L"SELECT subFamily\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)" 
L"";
        this->_commandCollection[35]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[35]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[36] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[36]->Connection = this->Connection;
        this->_commandCollection[36]->CommandText = L"SELECT subOrder\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[36]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[36]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[37] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[37]->Connection = this->Connection;
        this->_commandCollection[37]->CommandText = L"SELECT Sulphur\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[37]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[37]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[38] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[38]->Connection = this->Connection;
        this->_commandCollection[38]->CommandText = L"SELECT VeinLengthNum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID " 
L"= \?)";
        this->_commandCollection[38]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[38]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[39] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[39]->Connection = this->Connection;
        this->_commandCollection[39]->CommandText = L"SELECT VeinLsystemString\r\n FROM     PlantGraphicsInformation\r\nWHERE  (Plantlsyste" 
L"mID = \?)";
        this->_commandCollection[39]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[39]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[40] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[40]->Connection = this->Connection;
        this->_commandCollection[40]->CommandText = L"SELECT VeinTopRadiusNum\r\n FROM     PlantGraphicsInformation\r\nWHERE  (Plantlsystem" 
L"ID = \?)";
        this->_commandCollection[40]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[40]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
        this->_commandCollection[41] = (gcnew ::System::Data::OleDb::OleDbCommand());
        this->_commandCollection[41]->Connection = this->Connection;
        this->_commandCollection[41]->CommandText = L"SELECT Zinc\r\n FROM     PlantGraphicsInformation\r\nWHERE  (PlantlsystemID = \?)";
        this->_commandCollection[41]->CommandType = ::System::Data::CommandType::Text;
        this->_commandCollection[41]->Parameters->Add((gcnew ::System::Data::OleDb::OleDbParameter(L"PlantlsystemID", ::System::Data::OleDb::OleDbType::Integer, 
                0, ::System::Data::ParameterDirection::Input, static_cast<::System::Byte>(0), static_cast<::System::Byte>(0), L"PlantlsystemID", 
                ::System::Data::DataRowVersion::Current, false, nullptr)));
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Fill(PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  dataTable) {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        if (this->ClearBeforeFill == true) {
            dataTable->Clear();
        }
        ::System::Int32 returnValue = this->Adapter->Fill(dataTable);
        return returnValue;
    }
    
    inline PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  PlantGraphicsInformationTableAdapter::GetData() {
        this->Adapter->SelectCommand = this->CommandCollection[0];
        PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  dataTable = (gcnew PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable());
        this->Adapter->Fill(dataTable);
        return dataTable;
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::PlantGraphics(PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  dataTable) {
        this->Adapter->SelectCommand = this->CommandCollection[1];
        if (this->ClearBeforeFill == true) {
            dataTable->Clear();
        }
        ::System::Int32 returnValue = this->Adapter->Fill(dataTable);
        return returnValue;
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Update(PlantCreator::PlantGraphics::PlantGraphicsInformationDataTable^  dataTable) {
        return this->Adapter->Update(dataTable);
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Update(PlantCreator::PlantGraphics^  dataSet) {
        return this->Adapter->Update(dataSet, L"PlantGraphicsInformation");
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Update(::System::Data::DataRow^  dataRow) {
        return this->Adapter->Update(gcnew cli::array< ::System::Data::DataRow^  >(1) {dataRow});
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Update(cli::array< ::System::Data::DataRow^  >^  dataRows) {
        return this->Adapter->Update(dataRows);
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Delete(
                System::Int32 Original_PlantlsystemID, 
                System::String^  Original_ScienceNameID, 
                System::String^  Original_StemLsystemString, 
                System::String^  Original_PetioleLsystemString, 
                ::System::Nullable<::System::Double > Original_LeafTypeNum, 
                ::System::Nullable<::System::Double > Original_StemLengthNum, 
                ::System::Nullable<::System::Double > Original_StemTopRadiusNum, 
                ::System::Nullable<::System::Double > Original_StemBottomRadiusNum, 
                ::System::Nullable<::System::Double > Original_PetioleLengthNum, 
                ::System::Nullable<::System::Double > Original_PetioleTopRadiusNum, 
                ::System::Nullable<::System::Double > Original_PetioleBottomRadius, 
                ::System::Nullable<::System::Double > Original_VeinLengthNum, 
                ::System::Nullable<::System::Double > Original_VeinTopRadiusNum, 
                ::System::Nullable<::System::Double > Original_VeinBottomRadiusNum, 
                System::String^  Original_VeinLsystemString, 
                ::System::Nullable<::System::Double > Original_xRotate, 
                ::System::Nullable<::System::Double > Original_yRotate, 
                ::System::Nullable<::System::Double > Original_zRotate, 
                ::System::Nullable<::System::Double > Original_Nitrogen, 
                ::System::Nullable<::System::Double > Original_Hydrogen, 
                ::System::Nullable<::System::Double > Original_Potassium, 
                ::System::Nullable<::System::Double > Original_Phosphorous, 
                ::System::Nullable<::System::Double > Original_Calcium, 
                ::System::Nullable<::System::Double > Original_Magnesium, 
                ::System::Nullable<::System::Double > Original_Sulphur, 
                ::System::Nullable<::System::Double > Original_Chlorine, 
                ::System::Nullable<::System::Double > Original_Boron, 
                ::System::Nullable<::System::Double > Original_Iron, 
                ::System::Nullable<::System::Double > Original_Manganese, 
                ::System::Nullable<::System::Double > Original_Zinc, 
                ::System::Nullable<::System::Double > Original_Copper, 
                ::System::Nullable<::System::Double > Original_Sodium, 
                ::System::Nullable<::System::Double > Original_Molybdenum, 
                System::String^  Original_Division, 
                System::String^  Original_subDivision, 
                System::String^  Original_Class, 
                System::String^  Original_subClass, 
                System::String^  Original_Order, 
                System::String^  Original_subOrder, 
                System::String^  Original_Family, 
                System::String^  Original_subFamily, 
                System::String^  Original_Genus, 
                System::String^  Original_subGenus, 
                System::String^  Original_Species, 
                System::String^  Original_subSpecies, 
                ::System::Nullable<::System::Double > Original_leafLength, 
                ::System::Nullable<::System::Double > Original_leafRadius, 
                ::System::Nullable<::System::Int32 > Original_fruitType, 
                ::System::Nullable<::System::Int32 > Original_flowerType) {
        this->Adapter->DeleteCommand->Parameters[0]->Value = static_cast<System::Int32>(Original_PlantlsystemID);
        if (Original_ScienceNameID == nullptr) {
            this->Adapter->DeleteCommand->Parameters[1]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[2]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[1]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[2]->Value = (cli::safe_cast<System::String^  >(Original_ScienceNameID));
        }
        if (Original_StemLsystemString == nullptr) {
            this->Adapter->DeleteCommand->Parameters[3]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[4]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[3]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[4]->Value = (cli::safe_cast<System::String^  >(Original_StemLsystemString));
        }
        if (Original_PetioleLsystemString == nullptr) {
            this->Adapter->DeleteCommand->Parameters[5]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[6]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[5]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[6]->Value = (cli::safe_cast<System::String^  >(Original_PetioleLsystemString));
        }
        if (Original_LeafTypeNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[7]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[8]->Value = static_cast<System::Double>(Original_LeafTypeNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[7]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[8]->Value = ::System::DBNull::Value;
        }
        if (Original_StemLengthNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[9]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[10]->Value = static_cast<System::Double>(Original_StemLengthNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[9]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[10]->Value = ::System::DBNull::Value;
        }
        if (Original_StemTopRadiusNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[11]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[12]->Value = static_cast<System::Double>(Original_StemTopRadiusNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[11]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[12]->Value = ::System::DBNull::Value;
        }
        if (Original_StemBottomRadiusNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[13]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[14]->Value = static_cast<System::Double>(Original_StemBottomRadiusNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[13]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[14]->Value = ::System::DBNull::Value;
        }
        if (Original_PetioleLengthNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[15]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[16]->Value = static_cast<System::Double>(Original_PetioleLengthNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[15]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[16]->Value = ::System::DBNull::Value;
        }
        if (Original_PetioleTopRadiusNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[17]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[18]->Value = static_cast<System::Double>(Original_PetioleTopRadiusNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[17]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[18]->Value = ::System::DBNull::Value;
        }
        if (Original_PetioleBottomRadius.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[19]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[20]->Value = static_cast<System::Double>(Original_PetioleBottomRadius.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[19]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[20]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinLengthNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[21]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[22]->Value = static_cast<System::Double>(Original_VeinLengthNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[21]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[22]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinTopRadiusNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[23]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[24]->Value = static_cast<System::Double>(Original_VeinTopRadiusNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[23]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[24]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinBottomRadiusNum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[25]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[26]->Value = static_cast<System::Double>(Original_VeinBottomRadiusNum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[25]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[26]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinLsystemString == nullptr) {
            this->Adapter->DeleteCommand->Parameters[27]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[28]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[27]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[28]->Value = (cli::safe_cast<System::String^  >(Original_VeinLsystemString));
        }
        if (Original_xRotate.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[29]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[30]->Value = static_cast<System::Double>(Original_xRotate.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[29]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[30]->Value = ::System::DBNull::Value;
        }
        if (Original_yRotate.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[31]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[32]->Value = static_cast<System::Double>(Original_yRotate.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[31]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[32]->Value = ::System::DBNull::Value;
        }
        if (Original_zRotate.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[33]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[34]->Value = static_cast<System::Double>(Original_zRotate.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[33]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[34]->Value = ::System::DBNull::Value;
        }
        if (Original_Nitrogen.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[35]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[36]->Value = static_cast<System::Double>(Original_Nitrogen.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[35]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[36]->Value = ::System::DBNull::Value;
        }
        if (Original_Hydrogen.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[37]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[38]->Value = static_cast<System::Double>(Original_Hydrogen.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[37]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[38]->Value = ::System::DBNull::Value;
        }
        if (Original_Potassium.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[39]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[40]->Value = static_cast<System::Double>(Original_Potassium.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[39]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[40]->Value = ::System::DBNull::Value;
        }
        if (Original_Phosphorous.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[41]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[42]->Value = static_cast<System::Double>(Original_Phosphorous.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[41]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[42]->Value = ::System::DBNull::Value;
        }
        if (Original_Calcium.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[43]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[44]->Value = static_cast<System::Double>(Original_Calcium.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[43]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[44]->Value = ::System::DBNull::Value;
        }
        if (Original_Magnesium.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[45]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[46]->Value = static_cast<System::Double>(Original_Magnesium.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[45]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[46]->Value = ::System::DBNull::Value;
        }
        if (Original_Sulphur.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[47]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[48]->Value = static_cast<System::Double>(Original_Sulphur.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[47]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[48]->Value = ::System::DBNull::Value;
        }
        if (Original_Chlorine.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[49]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[50]->Value = static_cast<System::Double>(Original_Chlorine.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[49]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[50]->Value = ::System::DBNull::Value;
        }
        if (Original_Boron.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[51]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[52]->Value = static_cast<System::Double>(Original_Boron.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[51]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[52]->Value = ::System::DBNull::Value;
        }
        if (Original_Iron.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[53]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[54]->Value = static_cast<System::Double>(Original_Iron.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[53]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[54]->Value = ::System::DBNull::Value;
        }
        if (Original_Manganese.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[55]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[56]->Value = static_cast<System::Double>(Original_Manganese.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[55]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[56]->Value = ::System::DBNull::Value;
        }
        if (Original_Zinc.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[57]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[58]->Value = static_cast<System::Double>(Original_Zinc.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[57]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[58]->Value = ::System::DBNull::Value;
        }
        if (Original_Copper.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[59]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[60]->Value = static_cast<System::Double>(Original_Copper.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[59]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[60]->Value = ::System::DBNull::Value;
        }
        if (Original_Sodium.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[61]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[62]->Value = static_cast<System::Double>(Original_Sodium.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[61]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[62]->Value = ::System::DBNull::Value;
        }
        if (Original_Molybdenum.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[63]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[64]->Value = static_cast<System::Double>(Original_Molybdenum.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[63]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[64]->Value = ::System::DBNull::Value;
        }
        if (Original_Division == nullptr) {
            this->Adapter->DeleteCommand->Parameters[65]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[66]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[65]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[66]->Value = (cli::safe_cast<System::String^  >(Original_Division));
        }
        if (Original_subDivision == nullptr) {
            this->Adapter->DeleteCommand->Parameters[67]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[68]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[67]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[68]->Value = (cli::safe_cast<System::String^  >(Original_subDivision));
        }
        if (Original_Class == nullptr) {
            this->Adapter->DeleteCommand->Parameters[69]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[70]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[69]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[70]->Value = (cli::safe_cast<System::String^  >(Original_Class));
        }
        if (Original_subClass == nullptr) {
            this->Adapter->DeleteCommand->Parameters[71]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[72]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[71]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[72]->Value = (cli::safe_cast<System::String^  >(Original_subClass));
        }
        if (Original_Order == nullptr) {
            this->Adapter->DeleteCommand->Parameters[73]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[74]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[73]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[74]->Value = (cli::safe_cast<System::String^  >(Original_Order));
        }
        if (Original_subOrder == nullptr) {
            this->Adapter->DeleteCommand->Parameters[75]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[76]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[75]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[76]->Value = (cli::safe_cast<System::String^  >(Original_subOrder));
        }
        if (Original_Family == nullptr) {
            this->Adapter->DeleteCommand->Parameters[77]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[78]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[77]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[78]->Value = (cli::safe_cast<System::String^  >(Original_Family));
        }
        if (Original_subFamily == nullptr) {
            this->Adapter->DeleteCommand->Parameters[79]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[80]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[79]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[80]->Value = (cli::safe_cast<System::String^  >(Original_subFamily));
        }
        if (Original_Genus == nullptr) {
            this->Adapter->DeleteCommand->Parameters[81]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[82]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[81]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[82]->Value = (cli::safe_cast<System::String^  >(Original_Genus));
        }
        if (Original_subGenus == nullptr) {
            this->Adapter->DeleteCommand->Parameters[83]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[84]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[83]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[84]->Value = (cli::safe_cast<System::String^  >(Original_subGenus));
        }
        if (Original_Species == nullptr) {
            this->Adapter->DeleteCommand->Parameters[85]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[86]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[85]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[86]->Value = (cli::safe_cast<System::String^  >(Original_Species));
        }
        if (Original_subSpecies == nullptr) {
            this->Adapter->DeleteCommand->Parameters[87]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[88]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->DeleteCommand->Parameters[87]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[88]->Value = (cli::safe_cast<System::String^  >(Original_subSpecies));
        }
        if (Original_leafLength.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[89]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[90]->Value = static_cast<System::Double>(Original_leafLength.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[89]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[90]->Value = ::System::DBNull::Value;
        }
        if (Original_leafRadius.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[91]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[92]->Value = static_cast<System::Double>(Original_leafRadius.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[91]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[92]->Value = ::System::DBNull::Value;
        }
        if (Original_fruitType.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[93]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[94]->Value = static_cast<System::Int32>(Original_fruitType.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[93]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[94]->Value = ::System::DBNull::Value;
        }
        if (Original_flowerType.HasValue == true) {
            this->Adapter->DeleteCommand->Parameters[95]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->DeleteCommand->Parameters[96]->Value = static_cast<System::Int32>(Original_flowerType.Value);
        }
        else {
            this->Adapter->DeleteCommand->Parameters[95]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->DeleteCommand->Parameters[96]->Value = ::System::DBNull::Value;
        }
        ::System::Data::ConnectionState previousConnectionState = this->Adapter->DeleteCommand->Connection->State;
        if ((this->Adapter->DeleteCommand->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            this->Adapter->DeleteCommand->Connection->Open();
        }
        try {
            ::System::Int32 returnValue = this->Adapter->DeleteCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                this->Adapter->DeleteCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Insert(
                System::String^  ScienceNameID, 
                System::String^  StemLsystemString, 
                System::String^  PetioleLsystemString, 
                ::System::Nullable<::System::Double > LeafTypeNum, 
                ::System::Nullable<::System::Double > StemLengthNum, 
                ::System::Nullable<::System::Double > StemTopRadiusNum, 
                ::System::Nullable<::System::Double > StemBottomRadiusNum, 
                ::System::Nullable<::System::Double > PetioleLengthNum, 
                ::System::Nullable<::System::Double > PetioleTopRadiusNum, 
                ::System::Nullable<::System::Double > PetioleBottomRadius, 
                ::System::Nullable<::System::Double > VeinLengthNum, 
                ::System::Nullable<::System::Double > VeinTopRadiusNum, 
                ::System::Nullable<::System::Double > VeinBottomRadiusNum, 
                System::String^  VeinLsystemString, 
                ::System::Nullable<::System::Double > xRotate, 
                ::System::Nullable<::System::Double > yRotate, 
                ::System::Nullable<::System::Double > zRotate, 
                ::System::Nullable<::System::Double > Nitrogen, 
                ::System::Nullable<::System::Double > Hydrogen, 
                ::System::Nullable<::System::Double > Potassium, 
                ::System::Nullable<::System::Double > Phosphorous, 
                ::System::Nullable<::System::Double > Calcium, 
                ::System::Nullable<::System::Double > Magnesium, 
                ::System::Nullable<::System::Double > Sulphur, 
                ::System::Nullable<::System::Double > Chlorine, 
                ::System::Nullable<::System::Double > Boron, 
                ::System::Nullable<::System::Double > Iron, 
                ::System::Nullable<::System::Double > Manganese, 
                ::System::Nullable<::System::Double > Zinc, 
                ::System::Nullable<::System::Double > Copper, 
                ::System::Nullable<::System::Double > Sodium, 
                ::System::Nullable<::System::Double > Molybdenum, 
                System::String^  Division, 
                System::String^  subDivision, 
                System::String^  Class, 
                System::String^  subClass, 
                System::String^  Order, 
                System::String^  subOrder, 
                System::String^  Family, 
                System::String^  subFamily, 
                System::String^  Genus, 
                System::String^  subGenus, 
                System::String^  Species, 
                System::String^  subSpecies, 
                ::System::Nullable<::System::Double > leafLength, 
                ::System::Nullable<::System::Double > leafRadius, 
                ::System::Nullable<::System::Int32 > fruitType, 
                ::System::Nullable<::System::Int32 > flowerType) {
        if (ScienceNameID == nullptr) {
            this->Adapter->InsertCommand->Parameters[0]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(ScienceNameID));
        }
        if (StemLsystemString == nullptr) {
            this->Adapter->InsertCommand->Parameters[1]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[1]->Value = (cli::safe_cast<System::String^  >(StemLsystemString));
        }
        if (PetioleLsystemString == nullptr) {
            this->Adapter->InsertCommand->Parameters[2]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[2]->Value = (cli::safe_cast<System::String^  >(PetioleLsystemString));
        }
        if (LeafTypeNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[3]->Value = static_cast<System::Double>(LeafTypeNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[3]->Value = ::System::DBNull::Value;
        }
        if (StemLengthNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[4]->Value = static_cast<System::Double>(StemLengthNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[4]->Value = ::System::DBNull::Value;
        }
        if (StemTopRadiusNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[5]->Value = static_cast<System::Double>(StemTopRadiusNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[5]->Value = ::System::DBNull::Value;
        }
        if (StemBottomRadiusNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[6]->Value = static_cast<System::Double>(StemBottomRadiusNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[6]->Value = ::System::DBNull::Value;
        }
        if (PetioleLengthNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[7]->Value = static_cast<System::Double>(PetioleLengthNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[7]->Value = ::System::DBNull::Value;
        }
        if (PetioleTopRadiusNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[8]->Value = static_cast<System::Double>(PetioleTopRadiusNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[8]->Value = ::System::DBNull::Value;
        }
        if (PetioleBottomRadius.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[9]->Value = static_cast<System::Double>(PetioleBottomRadius.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[9]->Value = ::System::DBNull::Value;
        }
        if (VeinLengthNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[10]->Value = static_cast<System::Double>(VeinLengthNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[10]->Value = ::System::DBNull::Value;
        }
        if (VeinTopRadiusNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[11]->Value = static_cast<System::Double>(VeinTopRadiusNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[11]->Value = ::System::DBNull::Value;
        }
        if (VeinBottomRadiusNum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[12]->Value = static_cast<System::Double>(VeinBottomRadiusNum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[12]->Value = ::System::DBNull::Value;
        }
        if (VeinLsystemString == nullptr) {
            this->Adapter->InsertCommand->Parameters[13]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[13]->Value = (cli::safe_cast<System::String^  >(VeinLsystemString));
        }
        if (xRotate.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[14]->Value = static_cast<System::Double>(xRotate.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[14]->Value = ::System::DBNull::Value;
        }
        if (yRotate.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[15]->Value = static_cast<System::Double>(yRotate.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[15]->Value = ::System::DBNull::Value;
        }
        if (zRotate.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[16]->Value = static_cast<System::Double>(zRotate.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[16]->Value = ::System::DBNull::Value;
        }
        if (Nitrogen.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[17]->Value = static_cast<System::Double>(Nitrogen.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[17]->Value = ::System::DBNull::Value;
        }
        if (Hydrogen.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[18]->Value = static_cast<System::Double>(Hydrogen.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[18]->Value = ::System::DBNull::Value;
        }
        if (Potassium.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[19]->Value = static_cast<System::Double>(Potassium.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[19]->Value = ::System::DBNull::Value;
        }
        if (Phosphorous.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[20]->Value = static_cast<System::Double>(Phosphorous.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[20]->Value = ::System::DBNull::Value;
        }
        if (Calcium.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[21]->Value = static_cast<System::Double>(Calcium.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[21]->Value = ::System::DBNull::Value;
        }
        if (Magnesium.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[22]->Value = static_cast<System::Double>(Magnesium.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[22]->Value = ::System::DBNull::Value;
        }
        if (Sulphur.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[23]->Value = static_cast<System::Double>(Sulphur.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[23]->Value = ::System::DBNull::Value;
        }
        if (Chlorine.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[24]->Value = static_cast<System::Double>(Chlorine.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[24]->Value = ::System::DBNull::Value;
        }
        if (Boron.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[25]->Value = static_cast<System::Double>(Boron.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[25]->Value = ::System::DBNull::Value;
        }
        if (Iron.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[26]->Value = static_cast<System::Double>(Iron.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[26]->Value = ::System::DBNull::Value;
        }
        if (Manganese.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[27]->Value = static_cast<System::Double>(Manganese.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[27]->Value = ::System::DBNull::Value;
        }
        if (Zinc.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[28]->Value = static_cast<System::Double>(Zinc.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[28]->Value = ::System::DBNull::Value;
        }
        if (Copper.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[29]->Value = static_cast<System::Double>(Copper.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[29]->Value = ::System::DBNull::Value;
        }
        if (Sodium.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[30]->Value = static_cast<System::Double>(Sodium.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[30]->Value = ::System::DBNull::Value;
        }
        if (Molybdenum.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[31]->Value = static_cast<System::Double>(Molybdenum.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[31]->Value = ::System::DBNull::Value;
        }
        if (Division == nullptr) {
            this->Adapter->InsertCommand->Parameters[32]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[32]->Value = (cli::safe_cast<System::String^  >(Division));
        }
        if (subDivision == nullptr) {
            this->Adapter->InsertCommand->Parameters[33]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[33]->Value = (cli::safe_cast<System::String^  >(subDivision));
        }
        if (Class == nullptr) {
            this->Adapter->InsertCommand->Parameters[34]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[34]->Value = (cli::safe_cast<System::String^  >(Class));
        }
        if (subClass == nullptr) {
            this->Adapter->InsertCommand->Parameters[35]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[35]->Value = (cli::safe_cast<System::String^  >(subClass));
        }
        if (Order == nullptr) {
            this->Adapter->InsertCommand->Parameters[36]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[36]->Value = (cli::safe_cast<System::String^  >(Order));
        }
        if (subOrder == nullptr) {
            this->Adapter->InsertCommand->Parameters[37]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[37]->Value = (cli::safe_cast<System::String^  >(subOrder));
        }
        if (Family == nullptr) {
            this->Adapter->InsertCommand->Parameters[38]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[38]->Value = (cli::safe_cast<System::String^  >(Family));
        }
        if (subFamily == nullptr) {
            this->Adapter->InsertCommand->Parameters[39]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[39]->Value = (cli::safe_cast<System::String^  >(subFamily));
        }
        if (Genus == nullptr) {
            this->Adapter->InsertCommand->Parameters[40]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[40]->Value = (cli::safe_cast<System::String^  >(Genus));
        }
        if (subGenus == nullptr) {
            this->Adapter->InsertCommand->Parameters[41]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[41]->Value = (cli::safe_cast<System::String^  >(subGenus));
        }
        if (Species == nullptr) {
            this->Adapter->InsertCommand->Parameters[42]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[42]->Value = (cli::safe_cast<System::String^  >(Species));
        }
        if (subSpecies == nullptr) {
            this->Adapter->InsertCommand->Parameters[43]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->InsertCommand->Parameters[43]->Value = (cli::safe_cast<System::String^  >(subSpecies));
        }
        if (leafLength.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[44]->Value = static_cast<System::Double>(leafLength.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[44]->Value = ::System::DBNull::Value;
        }
        if (leafRadius.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[45]->Value = static_cast<System::Double>(leafRadius.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[45]->Value = ::System::DBNull::Value;
        }
        if (fruitType.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[46]->Value = static_cast<System::Int32>(fruitType.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[46]->Value = ::System::DBNull::Value;
        }
        if (flowerType.HasValue == true) {
            this->Adapter->InsertCommand->Parameters[47]->Value = static_cast<System::Int32>(flowerType.Value);
        }
        else {
            this->Adapter->InsertCommand->Parameters[47]->Value = ::System::DBNull::Value;
        }
        ::System::Data::ConnectionState previousConnectionState = this->Adapter->InsertCommand->Connection->State;
        if ((this->Adapter->InsertCommand->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            this->Adapter->InsertCommand->Connection->Open();
        }
        try {
            ::System::Int32 returnValue = this->Adapter->InsertCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                this->Adapter->InsertCommand->Connection->Close();
            }
        }
    }
    
    inline System::Int32 PlantGraphicsInformationTableAdapter::Update(
                System::String^  ScienceNameID, 
                System::String^  StemLsystemString, 
                System::String^  PetioleLsystemString, 
                ::System::Nullable<::System::Double > LeafTypeNum, 
                ::System::Nullable<::System::Double > StemLengthNum, 
                ::System::Nullable<::System::Double > StemTopRadiusNum, 
                ::System::Nullable<::System::Double > StemBottomRadiusNum, 
                ::System::Nullable<::System::Double > PetioleLengthNum, 
                ::System::Nullable<::System::Double > PetioleTopRadiusNum, 
                ::System::Nullable<::System::Double > PetioleBottomRadius, 
                ::System::Nullable<::System::Double > VeinLengthNum, 
                ::System::Nullable<::System::Double > VeinTopRadiusNum, 
                ::System::Nullable<::System::Double > VeinBottomRadiusNum, 
                System::String^  VeinLsystemString, 
                ::System::Nullable<::System::Double > xRotate, 
                ::System::Nullable<::System::Double > yRotate, 
                ::System::Nullable<::System::Double > zRotate, 
                ::System::Nullable<::System::Double > Nitrogen, 
                ::System::Nullable<::System::Double > Hydrogen, 
                ::System::Nullable<::System::Double > Potassium, 
                ::System::Nullable<::System::Double > Phosphorous, 
                ::System::Nullable<::System::Double > Calcium, 
                ::System::Nullable<::System::Double > Magnesium, 
                ::System::Nullable<::System::Double > Sulphur, 
                ::System::Nullable<::System::Double > Chlorine, 
                ::System::Nullable<::System::Double > Boron, 
                ::System::Nullable<::System::Double > Iron, 
                ::System::Nullable<::System::Double > Manganese, 
                ::System::Nullable<::System::Double > Zinc, 
                ::System::Nullable<::System::Double > Copper, 
                ::System::Nullable<::System::Double > Sodium, 
                ::System::Nullable<::System::Double > Molybdenum, 
                System::String^  Division, 
                System::String^  subDivision, 
                System::String^  Class, 
                System::String^  subClass, 
                System::String^  Order, 
                System::String^  subOrder, 
                System::String^  Family, 
                System::String^  subFamily, 
                System::String^  Genus, 
                System::String^  subGenus, 
                System::String^  Species, 
                System::String^  subSpecies, 
                ::System::Nullable<::System::Double > leafLength, 
                ::System::Nullable<::System::Double > leafRadius, 
                ::System::Nullable<::System::Int32 > fruitType, 
                ::System::Nullable<::System::Int32 > flowerType, 
                System::Int32 Original_PlantlsystemID, 
                System::String^  Original_ScienceNameID, 
                System::String^  Original_StemLsystemString, 
                System::String^  Original_PetioleLsystemString, 
                ::System::Nullable<::System::Double > Original_LeafTypeNum, 
                ::System::Nullable<::System::Double > Original_StemLengthNum, 
                ::System::Nullable<::System::Double > Original_StemTopRadiusNum, 
                ::System::Nullable<::System::Double > Original_StemBottomRadiusNum, 
                ::System::Nullable<::System::Double > Original_PetioleLengthNum, 
                ::System::Nullable<::System::Double > Original_PetioleTopRadiusNum, 
                ::System::Nullable<::System::Double > Original_PetioleBottomRadius, 
                ::System::Nullable<::System::Double > Original_VeinLengthNum, 
                ::System::Nullable<::System::Double > Original_VeinTopRadiusNum, 
                ::System::Nullable<::System::Double > Original_VeinBottomRadiusNum, 
                System::String^  Original_VeinLsystemString, 
                ::System::Nullable<::System::Double > Original_xRotate, 
                ::System::Nullable<::System::Double > Original_yRotate, 
                ::System::Nullable<::System::Double > Original_zRotate, 
                ::System::Nullable<::System::Double > Original_Nitrogen, 
                ::System::Nullable<::System::Double > Original_Hydrogen, 
                ::System::Nullable<::System::Double > Original_Potassium, 
                ::System::Nullable<::System::Double > Original_Phosphorous, 
                ::System::Nullable<::System::Double > Original_Calcium, 
                ::System::Nullable<::System::Double > Original_Magnesium, 
                ::System::Nullable<::System::Double > Original_Sulphur, 
                ::System::Nullable<::System::Double > Original_Chlorine, 
                ::System::Nullable<::System::Double > Original_Boron, 
                ::System::Nullable<::System::Double > Original_Iron, 
                ::System::Nullable<::System::Double > Original_Manganese, 
                ::System::Nullable<::System::Double > Original_Zinc, 
                ::System::Nullable<::System::Double > Original_Copper, 
                ::System::Nullable<::System::Double > Original_Sodium, 
                ::System::Nullable<::System::Double > Original_Molybdenum, 
                System::String^  Original_Division, 
                System::String^  Original_subDivision, 
                System::String^  Original_Class, 
                System::String^  Original_subClass, 
                System::String^  Original_Order, 
                System::String^  Original_subOrder, 
                System::String^  Original_Family, 
                System::String^  Original_subFamily, 
                System::String^  Original_Genus, 
                System::String^  Original_subGenus, 
                System::String^  Original_Species, 
                System::String^  Original_subSpecies, 
                ::System::Nullable<::System::Double > Original_leafLength, 
                ::System::Nullable<::System::Double > Original_leafRadius, 
                ::System::Nullable<::System::Int32 > Original_fruitType, 
                ::System::Nullable<::System::Int32 > Original_flowerType) {
        if (ScienceNameID == nullptr) {
            this->Adapter->UpdateCommand->Parameters[0]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[0]->Value = (cli::safe_cast<System::String^  >(ScienceNameID));
        }
        if (StemLsystemString == nullptr) {
            this->Adapter->UpdateCommand->Parameters[1]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[1]->Value = (cli::safe_cast<System::String^  >(StemLsystemString));
        }
        if (PetioleLsystemString == nullptr) {
            this->Adapter->UpdateCommand->Parameters[2]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[2]->Value = (cli::safe_cast<System::String^  >(PetioleLsystemString));
        }
        if (LeafTypeNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[3]->Value = static_cast<System::Double>(LeafTypeNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[3]->Value = ::System::DBNull::Value;
        }
        if (StemLengthNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[4]->Value = static_cast<System::Double>(StemLengthNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[4]->Value = ::System::DBNull::Value;
        }
        if (StemTopRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[5]->Value = static_cast<System::Double>(StemTopRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[5]->Value = ::System::DBNull::Value;
        }
        if (StemBottomRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[6]->Value = static_cast<System::Double>(StemBottomRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[6]->Value = ::System::DBNull::Value;
        }
        if (PetioleLengthNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[7]->Value = static_cast<System::Double>(PetioleLengthNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[7]->Value = ::System::DBNull::Value;
        }
        if (PetioleTopRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[8]->Value = static_cast<System::Double>(PetioleTopRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[8]->Value = ::System::DBNull::Value;
        }
        if (PetioleBottomRadius.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[9]->Value = static_cast<System::Double>(PetioleBottomRadius.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[9]->Value = ::System::DBNull::Value;
        }
        if (VeinLengthNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[10]->Value = static_cast<System::Double>(VeinLengthNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[10]->Value = ::System::DBNull::Value;
        }
        if (VeinTopRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[11]->Value = static_cast<System::Double>(VeinTopRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[11]->Value = ::System::DBNull::Value;
        }
        if (VeinBottomRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[12]->Value = static_cast<System::Double>(VeinBottomRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[12]->Value = ::System::DBNull::Value;
        }
        if (VeinLsystemString == nullptr) {
            this->Adapter->UpdateCommand->Parameters[13]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[13]->Value = (cli::safe_cast<System::String^  >(VeinLsystemString));
        }
        if (xRotate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[14]->Value = static_cast<System::Double>(xRotate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[14]->Value = ::System::DBNull::Value;
        }
        if (yRotate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[15]->Value = static_cast<System::Double>(yRotate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[15]->Value = ::System::DBNull::Value;
        }
        if (zRotate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[16]->Value = static_cast<System::Double>(zRotate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[16]->Value = ::System::DBNull::Value;
        }
        if (Nitrogen.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[17]->Value = static_cast<System::Double>(Nitrogen.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[17]->Value = ::System::DBNull::Value;
        }
        if (Hydrogen.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[18]->Value = static_cast<System::Double>(Hydrogen.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[18]->Value = ::System::DBNull::Value;
        }
        if (Potassium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[19]->Value = static_cast<System::Double>(Potassium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[19]->Value = ::System::DBNull::Value;
        }
        if (Phosphorous.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[20]->Value = static_cast<System::Double>(Phosphorous.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[20]->Value = ::System::DBNull::Value;
        }
        if (Calcium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[21]->Value = static_cast<System::Double>(Calcium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[21]->Value = ::System::DBNull::Value;
        }
        if (Magnesium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[22]->Value = static_cast<System::Double>(Magnesium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[22]->Value = ::System::DBNull::Value;
        }
        if (Sulphur.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[23]->Value = static_cast<System::Double>(Sulphur.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[23]->Value = ::System::DBNull::Value;
        }
        if (Chlorine.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[24]->Value = static_cast<System::Double>(Chlorine.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[24]->Value = ::System::DBNull::Value;
        }
        if (Boron.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[25]->Value = static_cast<System::Double>(Boron.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[25]->Value = ::System::DBNull::Value;
        }
        if (Iron.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[26]->Value = static_cast<System::Double>(Iron.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[26]->Value = ::System::DBNull::Value;
        }
        if (Manganese.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[27]->Value = static_cast<System::Double>(Manganese.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[27]->Value = ::System::DBNull::Value;
        }
        if (Zinc.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[28]->Value = static_cast<System::Double>(Zinc.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[28]->Value = ::System::DBNull::Value;
        }
        if (Copper.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[29]->Value = static_cast<System::Double>(Copper.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[29]->Value = ::System::DBNull::Value;
        }
        if (Sodium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[30]->Value = static_cast<System::Double>(Sodium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[30]->Value = ::System::DBNull::Value;
        }
        if (Molybdenum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[31]->Value = static_cast<System::Double>(Molybdenum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[31]->Value = ::System::DBNull::Value;
        }
        if (Division == nullptr) {
            this->Adapter->UpdateCommand->Parameters[32]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[32]->Value = (cli::safe_cast<System::String^  >(Division));
        }
        if (subDivision == nullptr) {
            this->Adapter->UpdateCommand->Parameters[33]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[33]->Value = (cli::safe_cast<System::String^  >(subDivision));
        }
        if (Class == nullptr) {
            this->Adapter->UpdateCommand->Parameters[34]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[34]->Value = (cli::safe_cast<System::String^  >(Class));
        }
        if (subClass == nullptr) {
            this->Adapter->UpdateCommand->Parameters[35]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[35]->Value = (cli::safe_cast<System::String^  >(subClass));
        }
        if (Order == nullptr) {
            this->Adapter->UpdateCommand->Parameters[36]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[36]->Value = (cli::safe_cast<System::String^  >(Order));
        }
        if (subOrder == nullptr) {
            this->Adapter->UpdateCommand->Parameters[37]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[37]->Value = (cli::safe_cast<System::String^  >(subOrder));
        }
        if (Family == nullptr) {
            this->Adapter->UpdateCommand->Parameters[38]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[38]->Value = (cli::safe_cast<System::String^  >(Family));
        }
        if (subFamily == nullptr) {
            this->Adapter->UpdateCommand->Parameters[39]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[39]->Value = (cli::safe_cast<System::String^  >(subFamily));
        }
        if (Genus == nullptr) {
            this->Adapter->UpdateCommand->Parameters[40]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[40]->Value = (cli::safe_cast<System::String^  >(Genus));
        }
        if (subGenus == nullptr) {
            this->Adapter->UpdateCommand->Parameters[41]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[41]->Value = (cli::safe_cast<System::String^  >(subGenus));
        }
        if (Species == nullptr) {
            this->Adapter->UpdateCommand->Parameters[42]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[42]->Value = (cli::safe_cast<System::String^  >(Species));
        }
        if (subSpecies == nullptr) {
            this->Adapter->UpdateCommand->Parameters[43]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[43]->Value = (cli::safe_cast<System::String^  >(subSpecies));
        }
        if (leafLength.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[44]->Value = static_cast<System::Double>(leafLength.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[44]->Value = ::System::DBNull::Value;
        }
        if (leafRadius.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[45]->Value = static_cast<System::Double>(leafRadius.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[45]->Value = ::System::DBNull::Value;
        }
        if (fruitType.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[46]->Value = static_cast<System::Int32>(fruitType.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[46]->Value = ::System::DBNull::Value;
        }
        if (flowerType.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[47]->Value = static_cast<System::Int32>(flowerType.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[47]->Value = ::System::DBNull::Value;
        }
        this->Adapter->UpdateCommand->Parameters[48]->Value = static_cast<System::Int32>(Original_PlantlsystemID);
        if (Original_ScienceNameID == nullptr) {
            this->Adapter->UpdateCommand->Parameters[49]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[50]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[49]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[50]->Value = (cli::safe_cast<System::String^  >(Original_ScienceNameID));
        }
        if (Original_StemLsystemString == nullptr) {
            this->Adapter->UpdateCommand->Parameters[51]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[52]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[51]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[52]->Value = (cli::safe_cast<System::String^  >(Original_StemLsystemString));
        }
        if (Original_PetioleLsystemString == nullptr) {
            this->Adapter->UpdateCommand->Parameters[53]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[54]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[53]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[54]->Value = (cli::safe_cast<System::String^  >(Original_PetioleLsystemString));
        }
        if (Original_LeafTypeNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[55]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[56]->Value = static_cast<System::Double>(Original_LeafTypeNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[55]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[56]->Value = ::System::DBNull::Value;
        }
        if (Original_StemLengthNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[57]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[58]->Value = static_cast<System::Double>(Original_StemLengthNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[57]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[58]->Value = ::System::DBNull::Value;
        }
        if (Original_StemTopRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[59]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[60]->Value = static_cast<System::Double>(Original_StemTopRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[59]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[60]->Value = ::System::DBNull::Value;
        }
        if (Original_StemBottomRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[61]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[62]->Value = static_cast<System::Double>(Original_StemBottomRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[61]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[62]->Value = ::System::DBNull::Value;
        }
        if (Original_PetioleLengthNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[63]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[64]->Value = static_cast<System::Double>(Original_PetioleLengthNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[63]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[64]->Value = ::System::DBNull::Value;
        }
        if (Original_PetioleTopRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[65]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[66]->Value = static_cast<System::Double>(Original_PetioleTopRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[65]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[66]->Value = ::System::DBNull::Value;
        }
        if (Original_PetioleBottomRadius.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[67]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[68]->Value = static_cast<System::Double>(Original_PetioleBottomRadius.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[67]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[68]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinLengthNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[69]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[70]->Value = static_cast<System::Double>(Original_VeinLengthNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[69]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[70]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinTopRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[71]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[72]->Value = static_cast<System::Double>(Original_VeinTopRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[71]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[72]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinBottomRadiusNum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[73]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[74]->Value = static_cast<System::Double>(Original_VeinBottomRadiusNum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[73]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[74]->Value = ::System::DBNull::Value;
        }
        if (Original_VeinLsystemString == nullptr) {
            this->Adapter->UpdateCommand->Parameters[75]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[76]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[75]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[76]->Value = (cli::safe_cast<System::String^  >(Original_VeinLsystemString));
        }
        if (Original_xRotate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[77]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[78]->Value = static_cast<System::Double>(Original_xRotate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[77]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[78]->Value = ::System::DBNull::Value;
        }
        if (Original_yRotate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[79]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[80]->Value = static_cast<System::Double>(Original_yRotate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[79]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[80]->Value = ::System::DBNull::Value;
        }
        if (Original_zRotate.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[81]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[82]->Value = static_cast<System::Double>(Original_zRotate.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[81]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[82]->Value = ::System::DBNull::Value;
        }
        if (Original_Nitrogen.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[83]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[84]->Value = static_cast<System::Double>(Original_Nitrogen.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[83]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[84]->Value = ::System::DBNull::Value;
        }
        if (Original_Hydrogen.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[85]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[86]->Value = static_cast<System::Double>(Original_Hydrogen.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[85]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[86]->Value = ::System::DBNull::Value;
        }
        if (Original_Potassium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[87]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[88]->Value = static_cast<System::Double>(Original_Potassium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[87]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[88]->Value = ::System::DBNull::Value;
        }
        if (Original_Phosphorous.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[89]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[90]->Value = static_cast<System::Double>(Original_Phosphorous.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[89]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[90]->Value = ::System::DBNull::Value;
        }
        if (Original_Calcium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[91]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[92]->Value = static_cast<System::Double>(Original_Calcium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[91]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[92]->Value = ::System::DBNull::Value;
        }
        if (Original_Magnesium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[93]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[94]->Value = static_cast<System::Double>(Original_Magnesium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[93]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[94]->Value = ::System::DBNull::Value;
        }
        if (Original_Sulphur.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[95]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[96]->Value = static_cast<System::Double>(Original_Sulphur.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[95]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[96]->Value = ::System::DBNull::Value;
        }
        if (Original_Chlorine.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[97]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[98]->Value = static_cast<System::Double>(Original_Chlorine.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[97]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[98]->Value = ::System::DBNull::Value;
        }
        if (Original_Boron.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[99]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[100]->Value = static_cast<System::Double>(Original_Boron.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[99]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[100]->Value = ::System::DBNull::Value;
        }
        if (Original_Iron.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[101]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[102]->Value = static_cast<System::Double>(Original_Iron.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[101]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[102]->Value = ::System::DBNull::Value;
        }
        if (Original_Manganese.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[103]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[104]->Value = static_cast<System::Double>(Original_Manganese.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[103]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[104]->Value = ::System::DBNull::Value;
        }
        if (Original_Zinc.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[105]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[106]->Value = static_cast<System::Double>(Original_Zinc.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[105]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[106]->Value = ::System::DBNull::Value;
        }
        if (Original_Copper.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[107]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[108]->Value = static_cast<System::Double>(Original_Copper.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[107]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[108]->Value = ::System::DBNull::Value;
        }
        if (Original_Sodium.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[109]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[110]->Value = static_cast<System::Double>(Original_Sodium.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[109]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[110]->Value = ::System::DBNull::Value;
        }
        if (Original_Molybdenum.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[111]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[112]->Value = static_cast<System::Double>(Original_Molybdenum.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[111]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[112]->Value = ::System::DBNull::Value;
        }
        if (Original_Division == nullptr) {
            this->Adapter->UpdateCommand->Parameters[113]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[114]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[113]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[114]->Value = (cli::safe_cast<System::String^  >(Original_Division));
        }
        if (Original_subDivision == nullptr) {
            this->Adapter->UpdateCommand->Parameters[115]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[116]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[115]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[116]->Value = (cli::safe_cast<System::String^  >(Original_subDivision));
        }
        if (Original_Class == nullptr) {
            this->Adapter->UpdateCommand->Parameters[117]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[118]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[117]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[118]->Value = (cli::safe_cast<System::String^  >(Original_Class));
        }
        if (Original_subClass == nullptr) {
            this->Adapter->UpdateCommand->Parameters[119]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[120]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[119]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[120]->Value = (cli::safe_cast<System::String^  >(Original_subClass));
        }
        if (Original_Order == nullptr) {
            this->Adapter->UpdateCommand->Parameters[121]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[122]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[121]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[122]->Value = (cli::safe_cast<System::String^  >(Original_Order));
        }
        if (Original_subOrder == nullptr) {
            this->Adapter->UpdateCommand->Parameters[123]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[124]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[123]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[124]->Value = (cli::safe_cast<System::String^  >(Original_subOrder));
        }
        if (Original_Family == nullptr) {
            this->Adapter->UpdateCommand->Parameters[125]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[126]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[125]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[126]->Value = (cli::safe_cast<System::String^  >(Original_Family));
        }
        if (Original_subFamily == nullptr) {
            this->Adapter->UpdateCommand->Parameters[127]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[128]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[127]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[128]->Value = (cli::safe_cast<System::String^  >(Original_subFamily));
        }
        if (Original_Genus == nullptr) {
            this->Adapter->UpdateCommand->Parameters[129]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[130]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[129]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[130]->Value = (cli::safe_cast<System::String^  >(Original_Genus));
        }
        if (Original_subGenus == nullptr) {
            this->Adapter->UpdateCommand->Parameters[131]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[132]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[131]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[132]->Value = (cli::safe_cast<System::String^  >(Original_subGenus));
        }
        if (Original_Species == nullptr) {
            this->Adapter->UpdateCommand->Parameters[133]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[134]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[133]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[134]->Value = (cli::safe_cast<System::String^  >(Original_Species));
        }
        if (Original_subSpecies == nullptr) {
            this->Adapter->UpdateCommand->Parameters[135]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[136]->Value = ::System::DBNull::Value;
        }
        else {
            this->Adapter->UpdateCommand->Parameters[135]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[136]->Value = (cli::safe_cast<System::String^  >(Original_subSpecies));
        }
        if (Original_leafLength.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[137]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[138]->Value = static_cast<System::Double>(Original_leafLength.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[137]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[138]->Value = ::System::DBNull::Value;
        }
        if (Original_leafRadius.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[139]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[140]->Value = static_cast<System::Double>(Original_leafRadius.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[139]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[140]->Value = ::System::DBNull::Value;
        }
        if (Original_fruitType.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[141]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[142]->Value = static_cast<System::Int32>(Original_fruitType.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[141]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[142]->Value = ::System::DBNull::Value;
        }
        if (Original_flowerType.HasValue == true) {
            this->Adapter->UpdateCommand->Parameters[143]->Value = (cli::safe_cast<System::Object^  >(0));
            this->Adapter->UpdateCommand->Parameters[144]->Value = static_cast<System::Int32>(Original_flowerType.Value);
        }
        else {
            this->Adapter->UpdateCommand->Parameters[143]->Value = (cli::safe_cast<System::Object^  >(1));
            this->Adapter->UpdateCommand->Parameters[144]->Value = ::System::DBNull::Value;
        }
        ::System::Data::ConnectionState previousConnectionState = this->Adapter->UpdateCommand->Connection->State;
        if ((this->Adapter->UpdateCommand->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            this->Adapter->UpdateCommand->Connection->Open();
        }
        try {
            ::System::Int32 returnValue = this->Adapter->UpdateCommand->ExecuteNonQuery();
            return returnValue;
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                this->Adapter->UpdateCommand->Connection->Close();
            }
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryBoron(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[2];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryCalcium(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[3];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryChlorine(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[4];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryClass(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[5];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryCopper(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[6];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryDivision(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[7];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryFamily(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[8];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Int32 > PlantGraphicsInformationTableAdapter::ScalarQueryflowerType(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[9];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Int32 >();
        }
        else {
            return ::System::Nullable<::System::Int32 >((cli::safe_cast<::System::Int32 >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Int32 > PlantGraphicsInformationTableAdapter::ScalarQueryfruitType(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[10];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Int32 >();
        }
        else {
            return ::System::Nullable<::System::Int32 >((cli::safe_cast<::System::Int32 >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryGenus(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[11];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryHydrogen(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[12];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryIron(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[13];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryLeafLength(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[14];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryLeafRadius(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[15];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryLeafType(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[16];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryMagnesium(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[17];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryManganese(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[18];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryMolybdenum(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[19];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryNitrogen(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[20];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryOrder(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[21];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryPetioleLength(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[22];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryPetioleLsystem(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[23];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryPetioleRadius(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[24];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryPhosphorous(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[25];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryPotassium(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[26];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryScienceName(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[27];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQuerySodium(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[28];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQuerySpecies(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[29];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryStemLength(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[30];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryStemLsystem(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[31];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryStemRadius(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[32];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQuerysubClass(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[33];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQuerysubDivision(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[34];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQuerysubFamily(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[35];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQuerysubOrder(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[36];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline System::Object^  PlantGraphicsInformationTableAdapter::ScalarQuerySulfur(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[37];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::Object^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryVeinLength(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[38];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline System::String^  PlantGraphicsInformationTableAdapter::ScalarQueryVeinLsystem(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[39];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return nullptr;
        }
        else {
            return (cli::safe_cast<::System::String^  >(returnValue));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryVeinRadius(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[40];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    
    inline ::System::Nullable<::System::Double > PlantGraphicsInformationTableAdapter::ScalarQueryZinc(System::Int32 PlantlsystemID) {
        ::System::Data::OleDb::OleDbCommand^  command = this->CommandCollection[41];
        command->Parameters[0]->Value = static_cast<System::Int32>(PlantlsystemID);
        ::System::Data::ConnectionState previousConnectionState = command->Connection->State;
        if ((command->Connection->State & ::System::Data::ConnectionState::Open) 
                    != ::System::Data::ConnectionState::Open) {
            command->Connection->Open();
        }
        ::System::Object^  returnValue;
        try {
            returnValue = command->ExecuteScalar();
        }
        finally {
            if (previousConnectionState == ::System::Data::ConnectionState::Closed) {
                command->Connection->Close();
            }
        }
        if ((returnValue == nullptr) 
                    || (returnValue->GetType() == ::System::DBNull::typeid)) {
            return ::System::Nullable<::System::Double >();
        }
        else {
            return ::System::Nullable<::System::Double >((cli::safe_cast<::System::Double >(returnValue)));
        }
    }
    }
}
